{% comment %}
  Enhanced Baby Planet Collection Template
  Features: Modern responsive design, sidebar filters, infinite scroll, proper pagination
{% endcomment %}

{% comment %} Grid configuration {% endcomment %}
{% liquid
  case settings.collection_grid
    when '2'
      assign grid_item_width = 'wide--one-half large--one-half medium--one-half small--one-whole'
      assign products_per_row = 2
    when '3'
      assign grid_item_width = 'wide--one-third large--one-third medium--one-half small--one-whole'
      assign products_per_row = 3
    when '4'
      assign grid_item_width = 'wide--one-quarter large--one-third medium--one-half small--one-whole'
      assign products_per_row = 4
    when '5'
      assign grid_item_width = 'wide--one-fifth large--one-quarter medium--one-half small--one-whole'
      assign products_per_row = 5
    else
      assign grid_item_width = 'wide--one-quarter large--one-third medium--one-half small--one-whole'
      assign products_per_row = 4
  endcase
%}

<div class="collection-page">
  {% comment %} Collection Header {% endcomment %}
  <section >
    <div class="container" style="max-width: 1600px;">
      {% comment %} Breadcrumb {% endcomment %}
      <nav class="breadcrumb" role="navigation" aria-label="Breadcrumb">
        <ol class="breadcrumb__list">
          <li class="breadcrumb__item">
            <a href="/" class="breadcrumb__link">{{ 'general.breadcrumbs.home' | t }}</a>
          </li>
          <li class="breadcrumb__item">
            <a href="/collections" class="breadcrumb__link">Колекции</a>
          </li>
          <li class="breadcrumb__item breadcrumb__item--current" aria-current="page">
            <span class="breadcrumb__text">{{ collection.title }}</span>
          </li>
        </ol>
      </nav>

      {% comment %} Collection Info {% endcomment %}
      <div class="collection-info">
        <h1 class="collection-title">{{ collection.title }}</h1>
        {% if collection.description != blank %}
          <div class="collection-description">
            {{ collection.description }}
          </div>
        {% endif %}
      </div>
    </div>
  </section>

  {% comment %} Main Content {% endcomment %}
  <main class="collection-main">
    <div class="container-full">
      <div class="collection-layout">

        {% comment %} Sidebar Filters {% endcomment %}
        <aside class="collection-sidebar" role="complementary">
          <div class="sidebar-header">
            <h3 class="sidebar-title">Филтри</h3>
            {% if collection.filters != empty %}
              <a href="{{ collection.url }}" class="clear-filters btn btn--primary" id="clear-all-filters">
                <svg class="clear-filters-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                Изчисти
              </a>
            {% endif %}
          </div>

          <div class="sidebar-content">
            {% comment %} Shopify Native Filtering {% endcomment %}
            {% if collection.filters != empty %}
              <form class="filter-form" method="get" action="{{ collection.url }}">
                {% comment %} Price filter first {% endcomment %}
                {% for filter in collection.filters %}
                  {% assign filter_name = filter.label | downcase %}
                  {% if filter.type == 'price_range' %}
                    <div class="filter-group">
                      <h4 class="filter-title">Цена</h4>
                      <div class="filter-options">
                        <div class="price-range">
                          <div class="price-inputs">
                            <input type="number"
                                   id="price-min"
                                   name="filter.v.price.gte"
                                   placeholder="От"
                                   min="{{ filter.min_value.value | divided_by: 100 }}"
                                   max="{{ filter.max_value.value | divided_by: 100 }}"
                                   {% if filter.min_value.value %}value="{{ filter.min_value.value | divided_by: 100 }}"{% endif %}
                                   step="0.01">
                            <span class="price-separator">-</span>
                            <input type="number"
                                   id="price-max"
                                   name="filter.v.price.lte"
                                   placeholder="До"
                                   min="{{ filter.min_value.value | divided_by: 100 }}"
                                   max="{{ filter.max_value.value | divided_by: 100 }}"
                                   {% if filter.max_value.value %}value="{{ filter.max_value.value | divided_by: 100 }}"{% endif %}
                                   step="0.01">
                          </div>
                          <button type="submit" class="apply-price-filter">Приложи</button>
                        </div>
                      </div>
                    </div>
                  {% endif %}
                {% endfor %}

                {% comment %} Other filters (excluding availability) {% endcomment %}
                {% for filter in collection.filters %}
                  {% assign filter_name = filter.label | downcase %}
                  {% unless filter.type == 'price_range' or filter_name == 'availability' %}
                    <div class="filter-group">
                      <h4 class="filter-title">
                        {% case filter_name %}
                          {% when 'colour' or 'color' or 'цвят' %}
                            Цвят
                          {% when 'size' or 'размер' %}
                            Размер
                          {% when 'brand' or 'марка' %}
                            Марка
                          {% when 'vendor' or 'производител' %}
                            Производител
                          {% when 'product_type' or 'тип продукт' or 'тип' %}
                            Тип продукт
                          {% when 'weight' or 'тегло' %}
                            Тегло
                          {% when 'material' or 'материал' %}
                            Материал
                          {% when 'age' or 'възраст' %}
                            Възраст
                          {% when 'gender' or 'пол' %}
                            Пол
                          {% when 'category' or 'категория' %}
                            Категория
                          {% else %}
                            {% assign translated_label = filter.label | downcase %}
                            {% case translated_label %}
                              {% when 'size' or 'размер' %}
                                Размер
                              {% when 'color' or 'colour' or 'цвят' %}
                                Цвят
                              {% when 'brand' or 'марка' %}
                                Марка
                              {% when 'vendor' or 'производител' %}
                                Производител
                              {% when 'type' or 'тип' %}
                                Тип
                              {% when 'material' or 'материал' %}
                                Материал
                              {% when 'age' or 'възраст' %}
                                Възраст
                              {% when 'gender' or 'пол' %}
                                Пол
                              {% when 'weight' or 'тегло' %}
                                Тегло
                              {% else %}
                                {{ filter.label }}
                            {% endcase %}
                        {% endcase %}
                      </h4>

                      <div class="filter-options {% if filter_name contains 'color' or filter_name contains 'colour' or filter_name contains 'цвят' %}filter-options--colors{% endif %}">
                        {% case filter.type %}
                          {% when 'boolean' or 'list' %}
                            {% for value in filter.values %}
                              {% if value.count > 0 %}
                                <label class="filter-option {% if filter_name contains 'color' or filter_name contains 'colour' or filter_name contains 'цвят' %}filter-option--color{% endif %}">
                                  <input type="checkbox"
                                         name="{{ filter.param_name }}"
                                         value="{{ value.value | escape }}"
                                         {% if value.active %}checked{% endif %}
                                         onchange="this.form.submit()">
                                  {% if filter_name contains 'color' or filter_name contains 'colour' or filter_name contains 'цвят' %}
                                    <span class="color-swatch" style="background-color: {{ value.value | downcase }};"></span>
                                  {% endif %}
                                  <span class="filter-label">{{ value.label }} ({{ value.count }})</span>
                                </label>
                              {% endif %}
                            {% endfor %}
                        {% endcase %}
                      </div>
                    </div>
                  {% endunless %}
                {% endfor %}

                {% comment %} Keep sort parameter {% endcomment %}
                {% if collection.sort_by != blank %}
                  <input type="hidden" name="sort_by" value="{{ collection.sort_by }}">
                {% endif %}
              </form>
            {% else %}
              {% comment %} Fallback: Tag-based filtering for older themes {% endcomment %}
              {% assign tags_to_show = 'Size,Color,Brand,Material,Style' | split: ',' %}
              {% for tag_category in tags_to_show %}
                {% assign category_tags = collection.all_tags | where: 'first', tag_category %}
                {% if category_tags.size > 0 %}
                  <div class="filter-group">
                    <h4 class="filter-title">
                      {% case tag_category %}
                        {% when 'Size' %}
                          Размер
                        {% when 'Color' %}
                          Цвят
                        {% when 'Brand' %}
                          Марка
                        {% when 'Material' %}
                          Материал
                        {% when 'Style' %}
                          Стил
                        {% else %}
                          {{ tag_category }}
                      {% endcase %}
                    </h4>
                    <div class="filter-options">
                      {% for tag in collection.all_tags %}
                        {% if tag contains tag_category %}
                          {% assign tag_parts = tag | split: '_' %}
                          {% if tag_parts.size > 1 %}
                            <label class="filter-option">
                              <a href="{{ collection.url }}/{{ tag | handle }}"
                                 class="filter-link {% if current_tags contains tag %}active{% endif %}">
                                {{ tag_parts[1] }}
                              </a>
                            </label>
                          {% endif %}
                        {% endif %}
                      {% endfor %}
                    </div>
                  </div>
                {% endif %}
              {% endfor %}
            {% endif %}
          </div>
        </aside>

        {% comment %} Main Content Area {% endcomment %}
        <div class="collection-content">

          {% comment %} Top Toolbar {% endcomment %}
          <div class="collection-toolbar">
            <div class="toolbar-left">
              <div class="results-count">
                <span class="count-text">
                  Общо
                  <strong>{{ collection.products_count }}</strong>
                  {% if collection.products_count == 1 %}
                    продукт
                  {% else %}
                    продукта
                  {% endif %}
                </span>
              </div>

              <button class="mobile-filter-toggle" id="mobile-filter-toggle">
                <svg class="icon" viewBox="0 0 24 24">
                  <path d="M3 17v2h6v-2H3zM3 5v2h10V5H3zm10 16v-2h8v-2h-8v-2h8v-2h-8V9h8V7h-8V5h8V3h-8v2H3v2h10v2H3v2h10v2H3v2h10v4h-2v2h2v2H3v2h10z"/>
                </svg>
                Филтри
              </button>
            </div>

            <div class="toolbar-right">
              {% comment %} Sort Dropdown {% endcomment %}
                             <div class="sort-dropdown">
                 <label for="sort-by" class="sort-label">Сортиране по:</label>
                 <select id="sort-by" class="sort-select">
                   <option value="manual" {% if collection.sort_by == blank %}selected{% endif %}>
                     ⭐ Препоръчани
                   </option>
                   <option value="best-selling" {% if collection.sort_by == 'best-selling' %}selected{% endif %}>
                     🔥 Най-продавани
                   </option>
                   <option value="title-ascending" {% if collection.sort_by == 'title-ascending' %}selected{% endif %}>
                     🔤 А-Я
                   </option>
                   <option value="title-descending" {% if collection.sort_by == 'title-descending' %}selected{% endif %}>
                     🔤 Я-А
                   </option>
                   <option value="price-ascending" {% if collection.sort_by == 'price-ascending' %}selected{% endif %}>
                     💰 Цена: Ниска към Висока
                   </option>
                   <option value="price-descending" {% if collection.sort_by == 'price-descending' %}selected{% endif %}>
                     💰 Цена: Висока към Ниска
                   </option>
                   <option value="created-descending" {% if collection.sort_by == 'created-descending' %}selected{% endif %}>
                     🆕 Най-нови
                   </option>
                   <option value="created-ascending" {% if collection.sort_by == 'created-ascending' %}selected{% endif %}>
                     📅 Най-стари
                   </option>
                 </select>
               </div>
            </div>
          </div>

          {% comment %} Products Grid {% endcomment %}
          <div class="products-section">
            {% paginate collection.products by settings.collection_results_per_page %}

              {% if collection.products.size > 0 %}
                <div class="products-container">
                  <ul class="products-grid"
                      id="products-grid"
                      data-collection-handle="{{ collection.handle }}"
                      data-current-page="{{ paginate.current_page }}"
                      data-total-pages="{{ paginate.pages }}"
                      data-total-products="{{ collection.products_count }}">

                    {% for product in collection.products %}
                      {% include 'vertical-grid-item-style-2', grid_item_width: grid_item_width %}
                    {% endfor %}
                  </ul>

                  {% comment %} Loading indicator {% endcomment %}
                  <div class="loading-indicator" id="loading-indicator" style="display: none;">
                    <div class="spinner"></div>
                    <span>Зареждане на още продукти...</span>
                  </div>

                  {% comment %} Load more trigger {% endcomment %}
                  {% if paginate.pages > 1 %}
                    <div class="load-more-trigger" id="load-more-trigger">
                      {% if paginate.next %}
                        <a href="{{ paginate.next.url }}" class="load-more-link" id="load-more-link">
                          Зареди още продукти
                        </a>
                      {% endif %}
                    </div>
                  {% endif %}
                </div>

              {% else %}
                {% comment %} Empty State {% endcomment %}
                <div class="collection-empty">
                  <div class="empty-content">
                    <div class="empty-icon">
                      <svg viewBox="0 0 24 24">
                        <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                      </svg>
                    </div>
                                         <h3 class="empty-title">Няма намерени продукти</h3>
                     <p class="empty-text">Опитайте да промените филтрите или търсачката</p>
                     <button class="btn btn--secondary" onclick="clearAllFilters()">
                       Изчисти всички филтри
                     </button>
                  </div>
                </div>
              {% endif %}

            {% endpaginate %}
          </div>
        </div>
      </div>
    </div>
  </main>
</div>

<style>
/* Enhanced Collection Page Styles */

.breadcrumb {
  background-image: none;
  padding: 1rem 0;
}

.main-content {
  padding: 0;
}

.collection-page {
  min-height: 100vh;
}

.container {
  max-width: 1440px;
  margin: 0 auto;
  padding: 0 20px;
}

.container-full {
  max-width: 1600px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Header */
.collection-header {
  padding: 0.5rem 0;
  background: #ffffff;
}

.breadcrumb__list {
  display: flex;
  align-items: center;
  list-style: none;
  margin: 0;
  padding: 0.5rem 0;
  font-size: 0.875rem;
  color: #7f8c8d;
  width: 100%;
}

.breadcrumb__item:not(:last-child)::after {
  content: '/';
  margin: 0 0.75rem;
  color: #bdc3c7;
}

.breadcrumb__link {
  color: #7f8c8d;
  text-decoration: none;
  transition: color 0.2s ease;
}

.breadcrumb__link:hover {
  color: #ff6b9d;
}

.collection-info {
  text-align: left;
  margin-bottom: 1rem;
}

.collection-title {
  font-size: clamp(1.75rem, 3vw, 2.5rem);
  font-weight: 600;
  color: #2c3e50;
  margin: 0 0 0.75rem 0;
  line-height: 1.3;
}

.collection-description {
  font-size: 1rem;
  color: #5d6d7e;
  line-height: 1.6;
  max-width: 800px;
}

/* Main Layout */
.collection-main {
  padding: 0 0 4rem;
}

.collection-layout {
  display: grid;
  grid-template-columns: 280px 1fr;
  gap: 2rem;
  align-items: start;
}

/* Sidebar */
.collection-sidebar {
  background: #ffffff;
  border-radius: 16px;
  padding: 1.5rem;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
  position: sticky;
  top: 2rem;
  max-height: calc(100vh - 4rem);
  overflow-y: auto;
}

.sidebar-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(255, 107, 157, 0.1);
}

.sidebar-title {
  font-size: 1.25rem;
  font-weight: 600;
  color: #2c3e50;
  margin: 0;
}

.clear-filters {
  background: rgba(255, 107, 157, 0.1);
  border: 1px solid #ff6b9d;
  color: #ff6b9d;
  font-size: 0.875rem;
  cursor: pointer;
  padding: 0.5rem 1rem;
  border-radius: 8px;
  transition: all 0.2s ease;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.clear-filters:hover {
  background: #ff6b9d;
  color: white;
}

.filter-form {
  width: 100%;
}

.filter-link {
  display: block;
  padding: 0.5rem;
  color: #2c3e50;
  text-decoration: none;
  border-radius: 6px;
  transition: all 0.2s ease;
}

.filter-link:hover,
.filter-link.active {
  background: rgba(255, 107, 157, 0.1);
  color: #ff6b9d;
}

.filter-group {
  margin-bottom: 2rem;
}

.filter-title {
  font-size: 1rem;
  font-weight: 600;
  color: #2c3e50;
  margin: 0 0 1rem 0;
}

.filter-options {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.filter-option {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 8px;
  transition: background-color 0.2s ease;
}

.filter-option:hover {
  background: rgba(255, 107, 157, 0.05);
}

.filter-option input[type="checkbox"] {
  width: 18px;
  height: 18px;
  border: 2px solid #ddd;
  border-radius: 4px;
  margin: 0;
}

.filter-option input[type="checkbox"]:checked {
  background: #ff6b9d;
  border-color: #ff6b9d;
}

.filter-label {
  font-size: 0.875rem;
  color: #2c3e50;
  flex: 1;
}

/* Color Filter */
.filter-options--colors {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  gap: 0.5rem;
}

.filter-option--color {
  flex-direction: column;
  text-align: center;
  padding: 0.75rem 0.5rem;
}

.color-swatch {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  border: 2px solid #ddd;
  margin-bottom: 0.5rem;
}

/* Price Filter */
.price-range {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.price-inputs {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.price-inputs input {
  flex: 1;
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 0.875rem;
}

.price-separator {
  color: #7f8c8d;
  font-weight: 500;
}

.apply-price-filter {
  background: #FF6B6B;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-size: 0.875rem;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.apply-price-filter:hover {
  background: #00D4C5;
}

/* Toolbar */
.collection-toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #ffffff;
  padding: 1rem 1.5rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
  margin-bottom: 2rem;
  border: 1px solid rgba(255, 107, 157, 0.1);
}

.toolbar-left {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.results-count {
  font-size: 0.875rem;
  color: #5d6d7e;
}

.mobile-filter-toggle {
  display: none;
  align-items: center;
  gap: 0.5rem;
  background: #ff6b9d;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 8px;
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.mobile-filter-toggle:hover {
  background: #e55b8a;
  transform: translateY(-1px);
}

.mobile-filter-toggle .icon {
  width: 16px;
  height: 16px;
  fill: currentColor;
}

.mobile-close-btn {
  background: none;
  border: none;
  color: #ff6b9d;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.mobile-close-btn:hover {
  background: rgba(255, 107, 157, 0.1);
}

.mobile-close-btn svg {
  width: 20px;
  height: 20px;
}

.toolbar-right {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.sort-dropdown {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.sort-label {
  font-size: 0.875rem;
  color: #5d6d7e;
  font-weight: 500;
}

.sort-select {
  padding: 0.5rem 1rem;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 0.875rem;
  background: white;
  min-width: 160px;
}

/* Products Grid */
.products-container {
  background: #ffffff;
  border-radius: 20px;
  padding: 2rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
  border: 1px solid rgba(255, 107, 157, 0.05);
}

.products-grid {
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  margin: 0 -15px;
  padding: 0;
}

.products-grid .baby-product-card {
  padding: 0 15px;
  margin-bottom: 30px;
}

/* Loading */
.loading-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  padding: 2rem;
  color: #7f8c8d;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin: 1rem 0;
  position: relative;
  z-index: 10;
}

/* Add to Cart Button Loading States */
[data-add-to-cart] {
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

[data-add-to-cart].loading {
  pointer-events: none;
}

[data-add-to-cart] .btn-loading {
  display: none;
  margin-left: 0.5rem;
}

[data-add-to-cart] .spinner-ring {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid #ffffff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

[data-add-to-cart].loading .btn-loading {
  display: inline-block;
}

[data-add-to-cart].loading::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% { left: -100%; }
  100% { left: 100%; }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.spinner {
  width: 32px;
  height: 32px;
  border: 4px solid rgba(255, 107, 157, 0.2);
  border-top: 4px solid #ff6b9d;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  flex-shrink: 0;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

.error-message {
  animation: fadeIn 0.3s ease;
}

/* Improve loading states */
.loading-indicator span {
  font-weight: 500;
  font-size: 0.95rem;
}

.load-more-trigger {
  text-align: center;
  padding: 2rem 0;
}

.load-more-link {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 2rem;
  background: #ff6b9d;
  color: white;
  text-decoration: none;
  border-radius: 12px;
  font-weight: 600;
  transition: all 0.3s ease;
}

.load-more-link:hover {
  background: #e55b8a;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(255, 107, 157, 0.4);
}

/* Empty State */
.collection-empty {
  background: #ffffff;
  border-radius: 20px;
  padding: 4rem 2rem;
  text-align: center;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
  border: 2px dashed rgba(255, 107, 157, 0.2);
}

.empty-content {
  max-width: 400px;
  margin: 0 auto;
}

.empty-icon {
  width: 80px;
  height: 80px;
  margin: 0 auto 1.5rem;
  background: linear-gradient(135deg, #ff6b9d 0%, #ffa8c5 100%);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.empty-icon svg {
  width: 40px;
  height: 40px;
  fill: white;
}

.empty-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: #2c3e50;
  margin: 0 0 1rem 0;
}

.empty-text {
  font-size: 1rem;
  color: #7f8c8d;
  line-height: 1.6;
  margin-bottom: 2rem;
}

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 1.5rem;
  border-radius: 12px;
  font-weight: 600;
  text-decoration: none;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 0.875rem;
}

.btn--secondary {
  background: #ecf0f1;
  color: #2c3e50;
}

.btn--secondary:hover {
  background: #d5dbdb;
}

/* Responsive Design */

/* Large tablets and small desktops */
@media screen and (max-width: 1200px) {
  .container-full {
    max-width: 100%;
    padding: 0 15px;
  }

  .collection-layout {
    grid-template-columns: 260px 1fr;
    gap: 1.5rem;
  }

  .collection-sidebar {
    padding: 1.25rem;
  }
}

/* Tablets */
@media screen and (max-width: 1024px) {
  .collection-layout {
    grid-template-columns: 1fr;
    gap: 0;
  }

  .collection-sidebar {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    background: rgba(0, 0, 0, 0.5);
    padding: 0;
    border-radius: 0;
    max-height: none;
    overflow: hidden;
  }

  .collection-sidebar.sidebar--open {
    display: flex;
    align-items: flex-end;
    justify-content: flex-end;
  }

  .sidebar-content {
    background: #ffffff;
    width: 90%;
    max-width: 400px;
    height: 100vh;
    overflow-y: auto;
    padding: 1.5rem;
    animation: slideInRight 0.3s ease;
    position: relative;
  }

  .sidebar-header {
    position: sticky;
    top: 0;
    background: #ffffff;
    z-index: 10;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
  }

  .mobile-filter-toggle {
    display: flex;
  }

  .collection-title {
    font-size: clamp(1.5rem, 4vw, 2rem);
  }
}

/* Mobile landscape and small tablets */
@media screen and (max-width: 768px) {
  .container {
    padding: 0 12px;
  }

  .container-full {
    padding: 0 12px;
  }

  .collection-header {
    padding: 0.75rem 0;
  }

  .collection-main {
    padding: 0 0 2rem;
  }

  .collection-info {
    margin-bottom: 0.75rem;
  }

  .collection-title {
    font-size: clamp(1.25rem, 5vw, 1.75rem);
    margin-bottom: 0.5rem;
  }

  .collection-description {
    font-size: 0.875rem;
  }

  .breadcrumb__list {
    font-size: 0.75rem;
    padding: 0.25rem 0;
  }

  .products-container {
    padding: 1rem;
    border-radius: 12px;
    margin-top: 1rem;
  }

  .products-grid {
    margin: 0 -8px;
  }

  .products-grid .baby-product-card {
    padding: 0 8px;
    margin-bottom: 16px;
    flex: 0 0 50%;
    max-width: 50%;
  }

  .collection-toolbar {
    flex-direction: column;
    gap: 0.75rem;
    align-items: stretch;
    padding: 0.75rem 1rem;
    margin-bottom: 1rem;
  }

  .toolbar-left {
    order: 2;
  }

  .toolbar-right {
    order: 1;
  }

  .toolbar-left,
  .toolbar-right {
    justify-content: space-between;
    width: 100%;
  }

  .results-count {
    font-size: 0.75rem;
  }

  .sort-dropdown {
    width: 100%;
  }

  .sort-select {
    width: 100%;
    padding: 0.5rem;
    font-size: 0.875rem;
  }

  .sidebar-content {
    width: 95%;
    max-width: 350px;
    padding: 1.25rem;
  }

  .filter-group {
    margin-bottom: 1.5rem;
  }

  .filter-title {
    font-size: 0.9rem;
    margin-bottom: 0.75rem;
  }

  .filter-options {
    gap: 0.5rem;
  }

  .filter-option {
    padding: 0.375rem;
  }

  .filter-label {
    font-size: 0.8rem;
  }

  .price-inputs input {
    padding: 0.375rem;
    font-size: 0.875rem;
  }

  .apply-price-filter {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
  }
}

/* Mobile portrait */
@media screen and (max-width: 480px) {
  .container {
    padding: 0 10px;
  }

  .container-full {
    padding: 0 10px;
  }

  .collection-title {
    font-size: clamp(1.125rem, 6vw, 1.5rem);
  }

  .products-container {
    padding: 0.75rem;
  }

  .products-grid {
    margin: 0 -6px;
  }

  .products-grid .baby-product-card {
    padding: 0 6px;
    margin-bottom: 12px;
    flex: 0 0 100%;
    max-width: 100%;
  }

  .collection-toolbar {
    padding: 0.5rem 0.75rem;
    gap: 0.5rem;
  }

  .mobile-filter-toggle {
    padding: 0.375rem 0.75rem;
    font-size: 0.8rem;
    gap: 0.375rem;
  }

  .mobile-filter-toggle .icon {
    width: 14px;
    height: 14px;
  }

  .sort-label {
    font-size: 0.75rem;
  }

  .sort-select {
    padding: 0.375rem;
    font-size: 0.8rem;
  }

  .results-count {
    font-size: 0.7rem;
  }

  .sidebar-content {
    width: 100%;
    max-width: none;
    padding: 1rem;
  }

  .sidebar-title {
    font-size: 1.125rem;
  }

  .clear-filters {
    padding: 0.375rem 0.75rem;
    font-size: 0.8rem;
  }

  .filter-options--colors {
    grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
  }

  .filter-option--color {
    padding: 0.5rem 0.25rem;
  }

  .color-swatch {
    width: 24px;
    height: 24px;
  }

  .price-inputs {
    flex-direction: column;
    gap: 0.5rem;
  }

  .price-separator {
    display: none;
  }

  .empty-content {
    padding: 2rem 1rem;
  }

  .empty-title {
    font-size: 1.25rem;
  }

  .empty-text {
    font-size: 0.875rem;
  }

  .load-more-link {
    padding: 0.625rem 1.5rem;
    font-size: 0.875rem;
  }

  .breadcrumb__item:not(:last-child)::after {
    margin: 0 0.5rem;
  }
}

/* Very small screens */
@media screen and (max-width: 360px) {
  .container {
    padding: 0 8px;
  }

  .container-full {
    padding: 0 8px;
  }

  .collection-title {
    font-size: 1.125rem;
    line-height: 1.2;
  }

  .products-container {
    padding: 0.5rem;
    border-radius: 8px;
  }

  .collection-toolbar {
    padding: 0.5rem;
  }

  .sidebar-content {
    padding: 0.75rem;
  }

  .filter-group {
    margin-bottom: 1.25rem;
  }

  .filter-title {
    font-size: 0.85rem;
  }

  .filter-label {
    font-size: 0.75rem;
  }
}

@keyframes slideInRight {
  from {
    transform: translateX(100%);
  }
  to {
    transform: translateX(0);
  }
}
</style>

<script>
// Enhanced Collection Functionality
document.addEventListener('DOMContentLoaded', function() {
  let isLoading = false;
  let currentPage = parseInt(document.querySelector('#products-grid')?.dataset.currentPage) || 1;
  const totalPages = parseInt(document.querySelector('#products-grid')?.dataset.totalPages) || 1;
  const collectionHandle = document.querySelector('#products-grid')?.dataset.collectionHandle;

  // Mobile filter toggle
  const mobileFilterToggle = document.getElementById('mobile-filter-toggle');
  const sidebar = document.querySelector('.collection-sidebar');
  const sidebarContent = document.querySelector('.sidebar-content');

  if (mobileFilterToggle && sidebar) {
    mobileFilterToggle.addEventListener('click', function() {
      sidebar.classList.add('sidebar--open');
      document.body.style.overflow = 'hidden';

      // Add close button to sidebar header on mobile
      addMobileCloseButton();
    });

    // Close sidebar when clicking backdrop
    sidebar.addEventListener('click', function(e) {
      if (e.target === sidebar) {
        closeMobileSidebar();
      }
    });

    // Handle escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && sidebar.classList.contains('sidebar--open')) {
        closeMobileSidebar();
      }
    });
  }

  function closeMobileSidebar() {
    if (sidebar) {
      sidebar.classList.remove('sidebar--open');
      document.body.style.overflow = '';

      // Remove mobile close button
      const mobileCloseBtn = document.querySelector('.mobile-close-btn');
      if (mobileCloseBtn) {
        mobileCloseBtn.remove();
      }
    }
  }

  function addMobileCloseButton() {
    const sidebarHeader = document.querySelector('.sidebar-header');
    if (sidebarHeader && !document.querySelector('.mobile-close-btn')) {
      const closeBtn = document.createElement('button');
      closeBtn.className = 'mobile-close-btn';
      closeBtn.innerHTML = `
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      `;
      closeBtn.addEventListener('click', closeMobileSidebar);
      sidebarHeader.appendChild(closeBtn);
    }
  }

  // Sort functionality
  const sortSelect = document.getElementById('sort-by');
  if (sortSelect) {
    sortSelect.addEventListener('change', function() {
      const sortValue = this.value;
      const url = new URL(window.location);

      if (sortValue === 'manual') {
        url.searchParams.delete('sort_by');
      } else {
        url.searchParams.set('sort_by', sortValue);
      }

      window.location.href = url.toString();
    });
  }

    // Get collection handle from URL or data attribute
  function getCollectionHandle() {
    const gridElement = document.querySelector('#products-grid');
    if (gridElement && gridElement.dataset.collectionHandle) {
      return gridElement.dataset.collectionHandle;
    }

    // Fallback to URL parsing if data attribute is not available
    const pathParts = window.location.pathname.split('/');
    const collectionsIndex = pathParts.indexOf('collections');
    if (collectionsIndex !== -1 && pathParts.length > collectionsIndex + 1) {
      // Get the handle but remove any tags that might be appended
      return pathParts[collectionsIndex + 1].split('/')[0];
    }
    return '';
  }

    // Enhanced filter functionality with form-based submission
  const filterForm = document.querySelector('.filter-form');
  const priceMinInput = document.getElementById('price-min');
  const priceMaxInput = document.getElementById('price-max');
  const clearAllBtn = document.getElementById('clear-all-filters');

  // Initialize price filter values from URL
  initializePriceFilters();

  // Price filter event listeners
  if (priceMinInput) {
    priceMinInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        submitPriceFilter();
      }
    });
  }

  if (priceMaxInput) {
    priceMaxInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        submitPriceFilter();
      }
    });
  }

  // Apply price filter button
  const applyPriceBtn = document.querySelector('.apply-price-filter');
  if (applyPriceBtn) {
    applyPriceBtn.addEventListener('click', function(e) {
      e.preventDefault();
      submitPriceFilter();
    });
  }

  function initializePriceFilters() {
    const urlParams = new URLSearchParams(window.location.search);

    // Set price values from URL (convert from cents to dollars)
    if (priceMinInput && priceMaxInput) {
      const minPrice = urlParams.get('filter.v.price.gte');
      const maxPrice = urlParams.get('filter.v.price.lte');

      if (minPrice) {
        priceMinInput.value = parseFloat(minPrice) / 100;
      }
      if (maxPrice) {
        priceMaxInput.value = parseFloat(maxPrice) / 100;
      }
    }
  }

  function submitPriceFilter() {
    if (!filterForm) return;

    // Convert price values to cents before submitting
    const priceMin = priceMinInput?.value;
    const priceMax = priceMaxInput?.value;

    if (priceMin && !isNaN(priceMin) && parseFloat(priceMin) > 0) {
      priceMinInput.value = Math.round(parseFloat(priceMin) * 100);
    }
    if (priceMax && !isNaN(priceMax) && parseFloat(priceMax) > 0) {
      priceMaxInput.value = Math.round(parseFloat(priceMax) * 100);
    }

    // Submit the form
    filterForm.submit();
  }

  // Add loading state to form submission
  if (filterForm) {
    filterForm.addEventListener('submit', function() {
      // Show loading indicator
      const loadingIndicator = document.getElementById('loading-indicator');
      if (loadingIndicator) {
        loadingIndicator.style.display = 'flex';
      }

      // Disable all form inputs to prevent double submission
      const inputs = filterForm.querySelectorAll('input, button');
      inputs.forEach(input => {
        input.disabled = true;
      });
    });
  }

  // Update clear button visibility based on active filters
  function updateClearButtonVisibility() {
    const urlParams = new URLSearchParams(window.location.search);
    const hasActiveFilters = Array.from(urlParams.keys()).some(key => key.startsWith('filter.'));

    if (clearAllBtn) {
      clearAllBtn.style.display = hasActiveFilters ? 'flex' : 'none';
    }
  }

  // Initialize clear button visibility
  updateClearButtonVisibility();

  // Infinite scroll functionality
  const loadMoreTrigger = document.getElementById('load-more-trigger');
  const loadingIndicator = document.getElementById('loading-indicator');
  const productsGrid = document.getElementById('products-grid');

  if (loadMoreTrigger && productsGrid) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !isLoading && currentPage < totalPages) {
          loadMoreProducts();
        }
      });
    }, { rootMargin: '100px' });

    observer.observe(loadMoreTrigger);
  }

  function loadMoreProducts() {
    if (isLoading || currentPage >= totalPages) return;

    isLoading = true;
    currentPage++;

    // Show loading indicator
    if (loadingIndicator) {
      loadingIndicator.style.display = 'flex';
    }

    // Hide load more button
    const loadMoreLink = document.getElementById('load-more-link');
    if (loadMoreLink) {
      loadMoreLink.style.display = 'none';
    }

    // Build URL for next page
    const url = new URL(window.location);
    url.searchParams.set('page', currentPage);

    fetch(url.toString())
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.text();
      })
      .then(html => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newProducts = doc.querySelectorAll('.baby-product-card');

        if (newProducts.length === 0) {
          console.log('No more products to load');
          if (loadMoreTrigger) {
            loadMoreTrigger.style.display = 'none';
          }
          isLoading = false;
          return;
        }

        // Add new products with animation
        newProducts.forEach((product, index) => {
          setTimeout(() => {
            // Clone the product element to avoid reference issues
            const productClone = product.cloneNode(true);
            productClone.style.opacity = '0';
            productClone.style.transform = 'translateY(30px)';
            productsGrid.appendChild(productClone);

            // Initialize add to cart functionality for new products
            initializeProductCardFunctionality(productClone);

            requestAnimationFrame(() => {
              productClone.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
              productClone.style.opacity = '1';
              productClone.style.transform = 'translateY(0)';
            });
          }, index * 100);
        });

        // Update results count
        updateResultsCount();

        // Hide loading indicator
        if (loadingIndicator) {
          loadingIndicator.style.display = 'none';
        }

        // Show load more button if there are more pages
        if (currentPage < totalPages && loadMoreLink) {
          loadMoreLink.style.display = 'inline-flex';
          const nextUrl = new URL(window.location);
          nextUrl.searchParams.set('page', currentPage + 1);
          loadMoreLink.href = nextUrl.toString();
        } else if (loadMoreTrigger) {
          loadMoreTrigger.style.display = 'none';
        }

        isLoading = false;
      })
      .catch(error => {
        console.error('Error loading more products:', error);
        isLoading = false;

        if (loadingIndicator) {
          loadingIndicator.style.display = 'none';
        }

        if (loadMoreLink) {
          loadMoreLink.style.display = 'inline-flex';
        }

        // Show error message
        showErrorMessage('Възникна грешка при зареждането на продуктите. Моля, опитайте отново.');
      });
  }

      // Function to initialize add to cart functionality for a specific form
  function initializeAddToCartForForm(form, addButton) {
    // Remove any existing event listeners to prevent duplicates
    const newForm = form.cloneNode(true);
    form.parentNode.replaceChild(newForm, form);
    const newAddButton = newForm.querySelector('[data-add-to-cart]');

    newForm.addEventListener('submit', function(e) {
      e.preventDefault();

      if (newAddButton.classList.contains('loading')) return;

      // Validate form data
      const variantId = newForm.querySelector('input[name="id"], select[name="id"]').value;
      if (!variantId) {
        console.error('No variant ID found');
        return;
      }

      newAddButton.classList.add('loading');

      // Get the button text element
      const btnText = newAddButton.querySelector('.btn-text');
      const originalText = btnText.textContent;
      btnText.textContent = 'Добавяне...';

      // Add to cart using Shopify's cart API
      const formData = new FormData(newForm);

      fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          return response.text().then(text => {
            throw new Error(`HTTP ${response.status}: ${text}`);
          });
        }
        return response.json();
      })
             .then(data => {
         // Success feedback
         newAddButton.style.background = '#00b894';
         btnText.textContent = 'Добавено!';

         // Show success toast notification
         showCartToast('Продуктът е добавен в количката!', 'success');

         // Dispatch cart updated event for theme compatibility
         document.dispatchEvent(new CustomEvent('cart:updated', {
           detail: { item: data }
         }));

         // Also dispatch legacy cart events for broader compatibility
         if (window.timber && window.timber.cartUpdateCallback) {
           window.timber.cartUpdateCallback(data);
         }

         // Reset button after 2 seconds
         setTimeout(() => {
           newAddButton.classList.remove('loading');
           newAddButton.style.background = '#FF6B9D';
           btnText.textContent = originalText;
         }, 2000);
       })
             .catch(error => {
         console.error('Error adding to cart:', error);
         newAddButton.classList.remove('loading');
         newAddButton.style.background = '#dc3545';

         // Show more specific error messages and toast notifications
         let errorText = 'Грешка!';
         let toastMessage = 'Възникна грешка при добавянето в количката';

         if (error.message.includes('422')) {
           errorText = 'Няма в наличност';
           toastMessage = 'Продуктът не е в наличност';
         } else if (error.message.includes('404')) {
           errorText = 'Продуктът не е намерен';
           toastMessage = 'Продуктът не е намерен';
         }

         btnText.textContent = errorText;
         showCartToast(toastMessage, 'error');

         // Reset button after 3 seconds for error states
         setTimeout(() => {
           newAddButton.style.background = '#FF6B9D';
           btnText.textContent = originalText;
         }, 3000);
       });
    });
  }

  // Initialize add to cart functionality for dynamically loaded products
  function initializeProductCardFunctionality(productCard) {
    // Note: Add to cart functionality is already handled in the vertical-grid-item-style-2.liquid snippet
    // We just need to ensure the event listeners are properly attached for dynamically loaded products

    const cartForm = productCard.querySelector('[data-product-form]');
    const addButton = productCard.querySelector('[data-add-to-cart]');

    if (cartForm && addButton) {
      // Re-initialize the add to cart functionality from the snippet
      initializeAddToCartForForm(cartForm, addButton);
    }

    // Variant selection handling for swatches
    const swatchInputs = productCard.querySelectorAll('.swatch input[type="radio"]');
    const variantSelect = productCard.querySelector('[data-variant-select]');
    const priceElement = productCard.querySelector('.product-card__price-current');
    const compareElement = productCard.querySelector('.product-card__price-compare');
    const addToCartBtn = productCard.querySelector('[data-add-to-cart]');

    if (swatchInputs.length > 0 && variantSelect) {
      swatchInputs.forEach(input => {
        input.addEventListener('change', function() {
          updateVariantSelection(productCard, variantSelect, priceElement, compareElement, addToCartBtn);
        });
      });
    }

    // Quick view functionality
    const quickViewBtn = productCard.querySelector('.action-btn--quick-view');
    if (quickViewBtn) {
      quickViewBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        const productHandle = this.dataset.productHandle;
        console.log('Quick view for:', productHandle);
      });
    }

    // Wishlist functionality
    const wishlistBtn = productCard.querySelector('.action-btn--wishlist');
    if (wishlistBtn) {
      wishlistBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        const productId = this.dataset.productId;
        const icon = this.querySelector('.icon--heart');

        if (this.classList.contains('added')) {
          this.classList.remove('added');
          icon.style.fill = 'currentColor';
          this.setAttribute('aria-label', 'Add to wishlist');
          this.setAttribute('title', 'Add to Wishlist');
        } else {
          this.classList.add('added');
          icon.style.fill = '#e74c3c';
          this.setAttribute('aria-label', 'Remove from wishlist');
          this.setAttribute('title', 'Remove from Wishlist');
        }

        console.log('Wishlist toggled for product:', productId);
      });
    }
  }

  // Update variant selection
  function updateVariantSelection(card, variantSelect, priceElement, compareElement, addToCartBtn) {
    const swatches = card.querySelectorAll('.swatch');
    const selectedOptions = [];

    swatches.forEach(swatch => {
      const checkedInput = swatch.querySelector('input[type="radio"]:checked');
      if (checkedInput) {
        selectedOptions.push(checkedInput.value);
      }
    });

    // Find matching variant
    const options = Array.from(variantSelect.options);
    const matchingOption = options.find(option => {
      const optionText = option.textContent.trim();
      return selectedOptions.every(selected => optionText.includes(selected));
    });

    if (matchingOption) {
      variantSelect.value = matchingOption.value;

      // Update button availability
      if (addToCartBtn) {
        const isAvailable = matchingOption.hasAttribute('data-available');
        addToCartBtn.disabled = !isAvailable;
        const btnText = addToCartBtn.querySelector('.btn-text');
        if (btnText) {
          btnText.textContent = isAvailable ? 'Добави в количката' : 'Няма в наличност';
        }
      }
    }
  }

  // Update results count
  function updateResultsCount() {
    const currentCountElement = document.getElementById('current-products-count');
    if (currentCountElement && productsGrid) {
      const currentCount = productsGrid.children.length;
      currentCountElement.textContent = currentCount;
    }
  }

  // Show error message
  function showErrorMessage(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.style.cssText = `
      background: #ff6b9d;
      color: white;
      padding: 1rem;
      border-radius: 8px;
      margin: 1rem 0;
      text-align: center;
      animation: fadeIn 0.3s ease;
    `;
    errorDiv.textContent = message;

    const productsContainer = document.querySelector('.products-container');
    if (productsContainer) {
      productsContainer.appendChild(errorDiv);

      // Remove error message after 5 seconds
      setTimeout(() => {
        errorDiv.remove();
      }, 5000);
    }
  }

  // Initialize existing products
  const existingProducts = document.querySelectorAll('.baby-product-card');
  existingProducts.forEach(product => {
    initializeProductCardFunctionality(product);
  });

  // Initialize results count
  updateResultsCount();
});

// Toast notification function for cart actions
function showCartToast(message, type) {
  // Create toast notification container
  const toast = document.createElement('div');
  toast.className = `cart-toast cart-toast--${type}`;
  toast.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px 20px 15px 15px;
    background: ${type === 'success' ? '#00b894' : type === 'info' ? '#3498db' : '#e74c3c'};
    color: white;
    border-radius: 12px;
    font-weight: 600;
    z-index: 10000;
    opacity: 0;
    transform: translateY(-20px);
    transition: all 0.3s ease;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    font-size: 0.9rem;
    max-width: 300px;
    word-wrap: break-word;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 10px;
  `;

  // Create message text
  const messageText = document.createElement('span');
  messageText.textContent = message;
  messageText.style.cssText = `
    flex: 1;
    line-height: 1.4;
  `;

  // Create close button
  const closeButton = document.createElement('button');
  closeButton.innerHTML = '×';
  closeButton.style.cssText = `
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    font-weight: bold;
    cursor: pointer;
    padding: 0;
    margin: 0;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.2s ease;
    flex-shrink: 0;
  `;

  // Add hover effect to close button
  closeButton.addEventListener('mouseenter', () => {
    closeButton.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
  });

  closeButton.addEventListener('mouseleave', () => {
    closeButton.style.backgroundColor = 'transparent';
  });

  // Append elements
  toast.appendChild(messageText);
  toast.appendChild(closeButton);
  document.body.appendChild(toast);

  // Function to close toast
  function closeToast() {
    toast.style.opacity = '0';
    toast.style.transform = 'translateY(-20px)';
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 300);
  }

  // Add click event listeners
  toast.addEventListener('click', closeToast);
  closeButton.addEventListener('click', (e) => {
    e.stopPropagation();
    closeToast();
  });

  // Show toast
  setTimeout(() => {
    toast.style.opacity = '1';
    toast.style.transform = 'translateY(0)';
  }, 100);

  // Auto-hide toast after 5 seconds (increased from 3)
  const autoHideTimeout = setTimeout(() => {
    closeToast();
  }, 5000);

  // Clear timeout if user closes manually
  toast.addEventListener('click', () => {
    clearTimeout(autoHideTimeout);
  });
}

// Global function for clearing filters (used in empty state)
function clearAllFilters() {
  const clearAllBtn = document.getElementById('clear-all-filters');
  if (clearAllBtn && clearAllBtn.href) {
    window.location.href = clearAllBtn.href;
  }
}
</script>
