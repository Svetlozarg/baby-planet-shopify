{% comment %}
  Optimized Product Page Template - Modern, Clean & Responsive
  Features: Improved spacing, better mobile UX, optimized performance
{% endcomment %}

{% assign current_variant = product.selected_or_first_available_variant %}
{% assign featured_image = current_variant.featured_image | default: product.featured_image %}

<style>
  /* Reset and Base Styles */
  .product-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #333;
  }

  /* Main Product Container */
  .product-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    margin: 20px 0;
    align-items: start;
    position: relative;
  }

  .product-container img {
    border-radius: 0 !important;
  }

  @media (max-width: 768px) {
    .product-container {
      grid-template-columns: 1fr;
      gap: 24px;
      margin: 16px 0;
    }

    .product-page {
      padding: 0 16px;
    }
  }

  /* Product Gallery */
  .product-gallery {
    /* Removed sticky positioning for natural scrolling */
  }

  .main-image {
    position: relative;
    margin-bottom: 20px;
    border-radius: 12px;
    overflow: hidden;
    background: #fff;
    aspect-ratio: 1;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.3s ease;
  }

  .main-image:hover {
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
  }

  .main-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.4s ease;
  }

  .main-image:hover img {
    transform: scale(1.05);
  }

  /* Disable hover transform when zoom is active */
  .image-zoom-container:hover img {
    transform: none !important;
  }

  .main-image {
    cursor: zoom-in;
    position: relative;
  }

    /* Custom Image Zoom Styles */
  .image-zoom-container {
    position: relative;
    display: inline-block;
    width: 100%;
  }

  .custom-zoom-box {
    position: absolute;
    left: calc(100% + 20px);
    top: 0;
    border: 2px solid #ddd;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    background: white;
    z-index: 1000;
    pointer-events: none;
    overflow: hidden;
    display: none;
  }

  .custom-zoom-lens {
    position: absolute;
    border: 2px solid rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    background: rgba(255, 255, 255, 0.4);
    cursor: crosshair;
    display: none;
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .custom-zoom-box,
    .custom-zoom-lens {
      display: none !important;
    }
  }

  .image-zoom-icon {
    position: absolute;
    top: 16px;
    right: 16px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px;
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 10;
  }

  .main-image:hover .image-zoom-icon {
    opacity: 1;
  }

  /* Zoom instructions */
  .zoom-instructions {
    position: absolute;
    bottom: 16px;
    left: 16px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 0.75rem;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 10;
  }

  .main-image:hover .zoom-instructions {
    opacity: 1;
  }

  @media (max-width: 768px) {
    .zoom-instructions {
      display: none;
    }
  }

  /* Thumbnails */
  .thumbnails {
    display: flex;
    gap: 12px;
    overflow-x: auto;
    padding: 8px 0;
    scrollbar-width: thin;
    scrollbar-color: #ddd transparent;
  }

  .thumbnails::-webkit-scrollbar {
    height: 4px;
  }

  .thumbnails::-webkit-scrollbar-track {
    background: transparent;
  }

  .thumbnails::-webkit-scrollbar-thumb {
    background: #ddd;
    border-radius: 2px;
  }

  .thumbnail {
    flex-shrink: 0;
    width: 90px;
    height: 90px;
    border-radius: 8px;
    overflow: hidden;
    border: 3px solid transparent;
    cursor: pointer;
    transition: all 0.3s ease;
    background: #fff;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.04);
    position: relative;
  }

  .thumbnail.active {
    border-color: {{ settings.color_primary | default: '#007bff' }};
  }

  .thumbnail:hover {
    border-color: {{ settings.color_primary | default: '#007bff' }};
  }

  .thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.2s ease;
  }

  .thumbnail:hover img {
    transform: scale(1.1);
  }

  .thumbnail-lightbox-icon {
    position: absolute;
    top: 4px;
    right: 4px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 4px;
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.3s ease;
    cursor: pointer;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .thumbnail:hover .thumbnail-lightbox-icon {
    opacity: 1;
  }

  .thumbnail-lightbox-icon:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
  }

  /* Product Info */
  .product-info {
    padding-top: 0;
  }

  .product-title {
    font-size: 1.5rem !important;
    color: #EF7B84 !important;
    font-weight: 700;
    margin: 0 0 20px 0;
    line-height: 1.2;
    color: #1a1a1a;
    letter-spacing: -0.02em;
  }

  @media (max-width: 768px) {
    .product-title {
      font-size: 1.75rem;
    }
  }

  /* Price Section */
  .price-section {
    margin-bottom: 24px;
    border-radius: 12px;
  }

  .price-container {
    display: flex;
    align-items: center;
    gap: 16px;
    margin-bottom: 12px;
    flex-wrap: wrap;
  }

  .current-price {
    font-size: 2rem !important;
    font-weight: 700;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .original-price {
    font-size: 1.5rem !important;
    color: #999;
    text-decoration: line-through;
    font-weight: 500;
  }

  .save-badge {
    background: linear-gradient(135deg, #ff6b6b, #ee5a52);
    color: white;
    padding: 8px 16px;
    border-radius: 25px;
    font-size: 0.9rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }

  .stock-status {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 0.95rem;
    font-weight: 500;
  }

  .stock-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #28a745;
    box-shadow: 0 0 0 2px rgba(40, 167, 69, 0.3);
    animation: pulse-green 2s infinite;
  }

  .stock-indicator.out-of-stock {
    background: #dc3545;
    box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.3);
    animation: none;
  }

  @keyframes pulse-green {
    0%, 100% { box-shadow: 0 0 0 2px rgba(40, 167, 69, 0.3); }
    50% { box-shadow: 0 0 0 6px rgba(40, 167, 69, 0.1); }
  }

  /* Product Description */
  .product-description {
    font-size: 0.95rem;
    color: #666;
    margin-bottom: 24px;
    line-height: 1.5;
  }

  /* Product Options */
  .product-options {
    margin-bottom: 32px;
  }

  .option-group {
    margin-bottom: 20px;
  }

  .option-label {
    display: block;
    font-weight: 600;
    margin-bottom: 12px;
    font-size: 1rem;
    color: #333;
  }

  /* Swatch Styling Override */
  .swatch {
    margin-bottom: 0;
  }

  .swatch .header {
    display: none !important;
  }

  .swatch-section {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .swatch-element {
    display: inline-block;
    margin: 0;
  }

  .swatch-element input {
    display: none;
  }

  .swatch-element label {
    display: block;
    padding: 10px 16px;
    border: 2px solid #ddd;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    text-align: center;
    min-width: 50px;
    background: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    font-size: 0.9rem;
  }

  .swatch-element label:hover {
    border-color: #EF7B84;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .swatch-element input:checked + label {
    border-color: #EF7B84;
    background: #EF7B84;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(239, 123, 132, 0.3);
  }

  .swatch-element.soldout label {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .swatch-element.soldout label:hover {
    transform: none;
    border-color: #ddd;
  }

  /* Color Swatches */
  .swatch-element.color label {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    padding: 0;
    min-width: 40px;
    position: relative;
  }

  .swatch-element.color input:checked + label {
    border-color: #EF7B84;
    box-shadow: 0 0 0 3px rgba(239, 123, 132, 0.3);
  }

  .swatch-element.color .crossed-out {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 20px;
    height: 20px;
  }

  /* Quantity & Add to Cart */
  .purchase-section {
    margin-bottom: 32px;
  }

  .quantity-section {
    margin-bottom: 16px;
  }

  .quantity-label {
    display: block;
    font-weight: 500;
    margin-bottom: 8px;
    font-size: 0.9rem;
    color: #666;
  }

  .quantity-input-wrapper {
    display: inline-block;
  }

  .qty-input {
    width: 80px;
    height: 36px;
    border: 1px solid #ddd;
    border-radius: 6px;
    text-align: center;
    font-weight: 500;
    font-size: 0.95rem;
    background: #fff;
    color: #333;
    transition: border-color 0.2s ease;
  }

  .qty-input:focus {
    outline: none;
    border-color: #EF7B84;
    box-shadow: 0 0 0 2px rgba(239, 123, 132, 0.2);
  }

  .cart-button-wrapper {
    margin-top: 16px;
  }

  .button-group {
    display: flex;
    gap: 12px;
    align-items: center;
  }

  .add-to-cart-btn {
    flex: 1;
    color: white;
    background-color: #EF7B84;
    border: none;
    padding: 16px 32px;
    border-radius: 10px;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    min-height: 48px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    box-shadow: 0 4px 16px rgba(239, 123, 132, 0.3);
  }

  .add-to-cart-btn:hover {
    background-color: #00D4C5;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 212, 197, 0.4);
  }

  .add-to-cart-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .add-to-cart-btn .cart-icon {
    width: 20px;
    height: 20px;
  }

  /* Wishlist Button Styles */
  .wishlist-button-wrapper {
    position: relative;
    display: inline-block;
  }

  .wishlist-btn {
    width: 56px;
    height: 56px;
    border: 2px solid #EF7B84;
    border-radius: 10px;
    background: white;
    color: #EF7B84;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    box-shadow: 0 4px 16px rgba(239, 123, 132, 0.2);
  }

  .wishlist-btn:hover {
    background: #EF7B84;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(239, 123, 132, 0.4);
  }

  .wishlist-btn.wishlist-added {
    background: #EF7B84;
    color: white;
    border-color: #EF7B84;
  }

  .wishlist-btn.wishlist-added:hover {
    background: #d66a73;
    border-color: #d66a73;
  }

  .wishlist-btn.wishlist-loading {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .wishlist-btn.wishlist-loading:hover {
    transform: none;
    background: white;
    color: #EF7B84;
  }

  .wishlist-btn .heart-icon {
    width: 20px;
    height: 20px;
    transition: transform 0.3s ease;
  }

  .wishlist-btn:hover .heart-icon {
    transform: scale(1.1);
  }

  .wishlist-btn.wishlist-loading .heart-icon {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* Mobile responsiveness for button group */
  @media (max-width: 768px) {
    .button-group {
      flex-direction: column;
      gap: 12px;
    }

    .add-to-cart-btn {
      width: 100%;
    }

    .wishlist-button-wrapper {
      align-self: center;
    }
  }

  @media (max-width: 480px) {
    .button-group {
      gap: 8px;
    }

    .add-to-cart-btn {
      padding: 14px 24px;
      font-size: 0.9rem;
    }

    .wishlist-btn {
      width: 48px;
      height: 44px;
    }

    .wishlist-btn .heart-icon {
      width: 18px;
      height: 18px;
    }
  }

  /* Product Meta */
  .product-meta {
    background: #f8f9fa;
    padding: 16px;
    border-radius: 8px;
    margin-bottom: 24px;
  }

  .meta-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    font-size: 0.9rem;
  }

  .meta-item:last-child {
    margin-bottom: 0;
  }

  .meta-label {
    font-weight: 500;
  }

  .meta-value {
    color: #666;
  }

  /* Product Description Section */
  .product-description-section {
    margin-top: 40px;
    border-top: 1px solid #eee;
    padding-top: 32px;
  }

  .description-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 20px;
    color: #1a1a1a;
    text-align: center;
    color: #ef7b84;
  }

  .description-content {
    color: #666;
    line-height: 1.6;
  }

  .description-content .rte {
    font-size: 1rem;
  }

  .description-content .rte p {
    margin-bottom: 16px;
  }

  .description-content .rte h1,
  .description-content .rte h2,
  .description-content .rte h3,
  .description-content .rte h4,
  .description-content .rte h5,
  .description-content .rte h6 {
    margin-top: 24px;
    margin-bottom: 12px;
    color: #333;
  }

  .description-content .rte ul,
  .description-content .rte ol {
    margin-bottom: 16px;
    padding-left: 20px;
  }

  .description-content .rte li {
    margin-bottom: 8px;
  }

  /* Product Specifications */
  .product-specifications {
    margin-top: 48px;
    padding-top: 32px;
    border-top: 1px solid #eee;
  }

  .specifications-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 24px;
    color: #ef7b84;
    text-align: center;
  }

  .specifications-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 16px;
    background: #f8f9fa;
    padding: 24px;
    border-radius: 12px;
    border: 1px solid #e9ecef;
  }

  @media (max-width: 768px) {
    .specifications-grid {
      grid-template-columns: 1fr;
      padding: 16px;
      gap: 12px;
    }
  }

  .spec-item {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 12px 16px;
    background: #fff;
    border-radius: 8px;
    border: 1px solid #e9ecef;
    transition: all 0.2s ease;
  }

  .spec-item:hover {
    border-color: #EF7B84;
    box-shadow: 0 2px 8px rgba(239, 123, 132, 0.1);
  }

  .spec-label {
    font-weight: 600;
    color: #333;
    margin-right: 16px;
    flex-shrink: 0;
    font-size: 0.9rem;
  }

  .spec-value {
    color: #666;
    text-align: right;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .spec-tags .spec-value {
    text-align: right;
  }

  .tag-item {
    display: inline-block;
    background: #EF7B84;
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
    margin: 2px;
    font-weight: 500;
  }

  /* Related Products */
  .related-products {
    margin-top: 48px;
    padding-top: 32px;
    border-top: 1px solid #eee;
  }

  .related-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 24px;
    text-align: center;
  }

  /* Utility Classes */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }

  .loading {
    opacity: 0.6;
    pointer-events: none;
  }

  /* Focus States */
  .add-to-cart-btn:focus,
  .qty-btn:focus,
  .tab-btn:focus,
  .thumbnail:focus {
    outline: 2px solid {{ settings.color_primary | default: '#007bff' }};
    outline-offset: 2px;
  }

  /* Image Lightbox */
  .image-lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    z-index: 9999;
    display: none;
    align-items: center;
    justify-content: center;
  }

  .image-lightbox.active {
    display: flex;
  }

  .lightbox-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
  }

  .lightbox-container {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lightbox-content {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .lightbox-content img {
    max-width: 90vw;
    max-height: 80vh;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
  }

  .lightbox-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    border: none;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 10;
  }

  .lightbox-close:hover {
    background: white;
    transform: scale(1.1);
  }

  .lightbox-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    border: none;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 10;
  }

  .lightbox-nav:hover {
    background: white;
    transform: translateY(-50%) scale(1.1);
  }

  .lightbox-nav:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .lightbox-nav:disabled:hover {
    transform: translateY(-50%) scale(1);
  }

  .lightbox-prev {
    left: 20px;
  }

  .lightbox-next {
    right: 20px;
  }

  .lightbox-counter {
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 0.9rem;
    margin-top: 16px;
    font-weight: 500;
  }

  /* Mobile Lightbox Adjustments */
  @media (max-width: 768px) {
    .lightbox-content img {
      max-width: 95vw;
      max-height: 70vh;
    }

    .lightbox-close {
      top: 10px;
      right: 10px;
      width: 40px;
      height: 40px;
    }

    .lightbox-nav {
      width: 40px;
      height: 40px;
    }

    .lightbox-prev {
      left: 10px;
    }

    .lightbox-next {
      right: 10px;
    }
  }

  /* Responsive Improvements */
  @media (max-width: 480px) {
    .product-title {
      font-size: 1.375rem;
    }

    .current-price {
      font-size: 1.375rem;
    }

    .product-meta {
      padding: 12px;
    }

    .product-tabs {
      margin-top: 32px;
      padding-top: 24px;
    }

    .related-products {
      margin-top: 32px;
      padding-top: 24px;
    }
  }
</style>

<!-- Schema Markup -->
<div itemscope itemtype="http://schema.org/Product">
  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="name" content="{{ product.title | escape }}">
  <meta itemprop="sku" content="{{ current_variant.sku }}">
  <meta itemprop="brand" content="{{ product.vendor }}">
  <meta itemprop="description" content="{{ product.description | strip_html | escape }}">
  <meta itemprop="image" content="https:{{ featured_image | img_url: 'grande' }}">

  <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
    <meta itemprop="priceCurrency" content="{{ shop.currency }}">
    <meta itemprop="price" content="{{ product.price | money_without_currency | strip_html }}">
    <meta itemprop="itemCondition" content="http://schema.org/NewCondition">
    <meta itemprop="availability" content="{% if product.available %}http://schema.org/InStock{% else %}http://schema.org/OutOfStock{% endif %}">
  </div>

  <div class="product-page">
    <div class="product-container">
      <!-- Product Gallery -->
      <div class="product-gallery">
        <div class="main-image" id="mainImageContainer">
          {% if product.images.size == 0 %}
            <img src="{{ '' | product_img_url: 'grande' }}" alt="{{ product.title | escape }}" loading="lazy">
          {% else %}
            <div class="image-zoom-container">
              <img id="mainImage" src="{{ featured_image | img_url: 'grande' }}" alt="{{ featured_image.alt | escape }}" loading="lazy" data-zoom="{{ featured_image | img_url: 'master' }}">
              <div class="image-zoom-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                  <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>
                </svg>
              </div>
              <div class="zoom-instructions">
                Скролнете за увеличаване • Натиснете за пълен размер
              </div>
            </div>
          {% endif %}
        </div>

        {% if product.images.size > 1 %}
        <div class="thumbnails">
          {% for image in product.images %}
            <div class="thumbnail {% if forloop.first %}active{% endif %}" data-image="{{ image | img_url: 'grande' }}" data-zoom="{{ image | img_url: 'master' }}" data-index="{{ forloop.index0 }}">
              <img src="{{ image | img_url: 'compact' }}" alt="{{ image.alt | escape }}" loading="lazy">
            </div>
          {% endfor %}
        </div>
        {% endif %}
      </div>

      <!-- Product Info -->
      <div class="product-info">
        <h1 class="product-title" itemprop="name">{{ product.title }}</h1>

        <!-- Price Section -->
        <div class="price-section">
          <div class="price-container">
            <span class="current-price" id="price" itemprop="price">
              {{ product.price | money }}
            </span>

            {% if product.compare_at_price > product.price %}
              <span class="original-price" id="comparePrice">
                {{ product.compare_at_price | money }}
              </span>
              {% assign savings = product.compare_at_price | minus: product.price %}
              {% assign savings_percent = savings | times: 100 | divided_by: product.compare_at_price %}
              <span class="save-badge">
                -{{ savings_percent }}% ОТСТЪПКА
              </span>
            {% endif %}
          </div>

          <!-- Stock Status -->
          <div class="stock-status">
            <span class="stock-indicator {% unless current_variant.available %}out-of-stock{% endunless %}"></span>
            <span id="stockText">
              {% if current_variant.available %}
                {% if current_variant.inventory_management %}
                  {% if current_variant.inventory_quantity > 0 %}
                    В наличност
                  {% else %}
                    В наличност
                  {% endif %}
                {% else %}
                  В наличност
                {% endif %}
              {% else %}
                Няма в наличност
              {% endif %}
            </span>
          </div>
        </div>

        {% form 'product', product, id: "productForm", class: "product-form" %}
          <!-- Product Options -->
          {% assign hide_default_title = false %}
          {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
            {% assign hide_default_title = true %}
          {% endif %}

          <div class="product-options" {% if hide_default_title %}style="display:none;"{% endif %}>
            {% for option in product.options %}
              <div class="option-group">
                <label class="option-label">{{ option }}:</label>
                {% include 'swatch' with option %}
              </div>
            {% endfor %}

            <select name="id" id="variantSelect" style="display: none;">
              {% for variant in product.variants %}
                <option {% if variant == current_variant %}selected{% endif %} value="{{ variant.id }}">
                  {{ variant.title }}
                </option>
              {% endfor %}
            </select>
          </div>

                    <!-- Purchase Section -->
          <div class="purchase-section">
            {% if settings.product_quantity_enable %}
            <div class="quantity-section">
              <label class="quantity-label" for="quantity">Количество:</label>
              <div class="quantity-input-wrapper">
                <input type="number" name="quantity" id="quantity" class="qty-input" value="1" min="1" max="99">
              </div>
            </div>
            {% endif %}

            <div class="cart-button-wrapper">
              <div class="button-group">
                <button type="submit" id="addToCart" class="add-to-cart-btn">
                  <svg class="cart-icon" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M7 18c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12L8.1 13h7.45c.75 0 1.41-.41 1.75-1.03L21.7 4H5.21l-.94-2H1zm16 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                  </svg>
                  <span id="cartText">Добави в количката</span>
                </button>

                <div class="wishlist-button-wrapper">
                  <div class="default-wishbutton-{{ product.handle }}" style="display: block;">
                    <button type="button" class="wishlist-btn add-in-wishlist-js" data-product-handle="{{ product.handle }}" data-product-id="{{ product.id }}" title="Добави в списъка с желания">
                      <svg class="heart-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5 2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.04L12,21.35Z"/>
                      </svg>
                    </button>
                  </div>

                  <div class="loadding-wishbutton-{{ product.handle }}" style="display: none;">
                    <button type="button" class="wishlist-btn wishlist-loading" disabled title="Добавяне в списъка с желания...">
                      <svg class="heart-icon spinner" viewBox="0 0 24 24" fill="currentColor">
                        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-dasharray="31.416" stroke-dashoffset="31.416">
                          <animate attributeName="stroke-dasharray" dur="2s" values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/>
                          <animate attributeName="stroke-dashoffset" dur="2s" values="0;-15.708;-31.416" repeatCount="indefinite"/>
                        </circle>
                      </svg>
                    </button>
                  </div>

                  <div class="added-wishbutton-{{ product.handle }}" style="display: none;">
                    <a href="/pages/wishlist" class="wishlist-btn wishlist-added" title="Вижте списъка с желания">
                      <svg class="heart-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5 2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.04L12,21.35Z"/>
                      </svg>
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        {% endform %}
      </div>
    </div>

    <!-- Product Description -->
    <div class="product-description-section">
      <h2 class="description-title">Описание</h2>
      <div class="description-content">
        <div class="rte">
          {{ product.description }}
        </div>
      </div>
    </div>

        <!-- Product Specifications -->
    <div class="product-specifications">
      <h2 class="specifications-title">Характеристики</h2>
      <div class="specifications-grid">

        <!-- Vendor/Brand -->
        {% if product.vendor != blank %}
        <div class="spec-item">
          <span class="spec-label">Марка:</span>
          <span class="spec-value">{{ product.vendor }}</span>
        </div>
        {% endif %}

        <!-- Product Type/Category -->
        {% if product.type != blank %}
        <div class="spec-item">
          <span class="spec-label">Тип продукт:</span>
          <span class="spec-value">{{ product.type }}</span>
        </div>
        {% endif %}

        <!-- Product Collections (Categories) -->
        {% if product.collections.size > 0 %}
        <div class="spec-item">
          <span class="spec-label">Категории:</span>
          <span class="spec-value">
            {% for collection in product.collections %}
              {% unless collection.handle == 'all' or collection.handle == 'frontpage' %}
                {{ collection.title }}{% unless forloop.last %}, {% endunless %}
              {% endunless %}
            {% endfor %}
          </span>
        </div>
        {% endif %}

        <!-- Category-related Metafields -->
        {% if product.metafields.category.main_category != blank %}
        <div class="spec-item">
          <span class="spec-label">Основна категория:</span>
          <span class="spec-value">{{ product.metafields.category.main_category }}</span>
        </div>
        {% endif %}

        {% if product.metafields.category.subcategory != blank %}
        <div class="spec-item">
          <span class="spec-label">Подкategория:</span>
          <span class="spec-value">{{ product.metafields.category.subcategory }}</span>
        </div>
        {% endif %}

        {% if product.metafields.category.age_group != blank %}
        <div class="spec-item">
          <span class="spec-label">Възрастова група:</span>
          <span class="spec-value">{{ product.metafields.category.age_group }}</span>
        </div>
        {% endif %}

        {% if product.metafields.category.gender != blank %}
        <div class="spec-item">
          <span class="spec-label">Пол:</span>
          <span class="spec-value">{{ product.metafields.category.gender }}</span>
        </div>
        {% endif %}

        {% if product.metafields.category.season != blank %}
        <div class="spec-item">
          <span class="spec-label">Сезон:</span>
          <span class="spec-value">{{ product.metafields.category.season }}</span>
        </div>
        {% endif %}

        <!-- Product-specific Metafields -->
        {% if product.metafields.product.material != blank %}
        <div class="spec-item">
          <span class="spec-label">Материал:</span>
          <span class="spec-value">{{ product.metafields.product.material }}</span>
        </div>
        {% endif %}

        {% if product.metafields.product.color != blank %}
        <div class="spec-item">
          <span class="spec-label">Цвят:</span>
          <span class="spec-value">{{ product.metafields.product.color }}</span>
        </div>
        {% endif %}

        {% if product.metafields.product.size != blank %}
        <div class="spec-item">
          <span class="spec-label">Размер:</span>
          <span class="spec-value">{{ product.metafields.product.size }}</span>
        </div>
        {% endif %}

        {% if product.metafields.product.brand != blank %}
        <div class="spec-item">
          <span class="spec-label">Марка:</span>
          <span class="spec-value">{{ product.metafields.product.brand }}</span>
        </div>
        {% endif %}

        {% if product.metafields.product.dimensions != blank %}
        <div class="spec-item">
          <span class="spec-label">Размери:</span>
          <span class="spec-value">{{ product.metafields.product.dimensions }}</span>
        </div>
        {% endif %}

        <!-- All other custom metafields -->
        {% for metafield in product.metafields.custom %}
          {% if metafield.value != blank %}
          <div class="spec-item">
            <span class="spec-label">{{ metafield.key | replace: '_', ' ' | replace: '-', ' ' | capitalize }}:</span>
            <span class="spec-value">{{ metafield.value }}</span>
          </div>
          {% endif %}
        {% endfor %}

        <!-- Product Tags -->
        {% if product.tags.size > 0 %}
        <div class="spec-item spec-tags">
          <span class="spec-label">Етикети:</span>
          <span class="spec-value">
            {% for tag in product.tags %}
              <span class="tag-item">{{ tag }}</span>{% unless forloop.last %}, {% endunless %}
            {% endfor %}
          </span>
        </div>
        {% endif %}

      </div>
    </div>

    <!-- Related Products -->
    {% if settings.product_related_enable %}
    <div class="related-products">
      <h2 class="related-title">Може да харесате също</h2>
      {% include 'related-products' %}
    </div>
    {% endif %}
  </div>
</div>

<!-- Image Lightbox -->
<div class="image-lightbox" id="imageLightbox">
  <div class="lightbox-overlay"></div>
  <div class="lightbox-container">
    <button class="lightbox-close" id="lightboxClose">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
      </svg>
    </button>

    <button class="lightbox-nav lightbox-prev" id="lightboxPrev">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
      </svg>
    </button>

    <button class="lightbox-nav lightbox-next" id="lightboxNext">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
      </svg>
    </button>

    <div class="lightbox-content">
      <img id="lightboxImage" src="" alt="">
      <div class="lightbox-counter">
        <span id="lightboxCurrent">1</span> / <span id="lightboxTotal">{{ product.images.size }}</span>
      </div>
    </div>
  </div>
</div>

<!-- Custom Image Zoom Implementation -->

<script>
(function() {
  'use strict';

  // DOM Elements
  const mainImage = document.getElementById('mainImage');
  const mainImageContainer = document.getElementById('mainImageContainer');
  const thumbnails = document.querySelectorAll('.thumbnail');
  const variantSelect = document.getElementById('variantSelect');
  const productForm = document.getElementById('productForm');
  const addToCartBtn = document.getElementById('addToCart');
  const cartText = document.getElementById('cartText');
  const qtyInput = document.getElementById('quantity');

  // Lightbox Elements
  const lightbox = document.getElementById('imageLightbox');
  const lightboxImage = document.getElementById('lightboxImage');
  const lightboxClose = document.getElementById('lightboxClose');
  const lightboxPrev = document.getElementById('lightboxPrev');
  const lightboxNext = document.getElementById('lightboxNext');
  const lightboxOverlay = document.querySelector('.lightbox-overlay');
  const lightboxCurrent = document.getElementById('lightboxCurrent');
  const lightboxTotal = document.getElementById('lightboxTotal');

  const priceElement = document.getElementById('price');
  const compareElement = document.getElementById('comparePrice');
  const availabilityElement = document.getElementById('availability');
  const skuElement = document.getElementById('sku');
  const stockText = document.getElementById('stockText');
  const stockIndicator = document.querySelector('.stock-indicator');
  const specAvailability = document.getElementById('spec-availability');

  // Product Data
  const product = {{ product | json }};
  const moneyFormat = "{{ shop.money_format }}";

  // Lightbox Data
  const productImages = [
    {% for image in product.images %}
      {
        src: "{{ image | img_url: 'master' }}",
        alt: "{{ image.alt | escape }}",
        thumb: "{{ image | img_url: 'grande' }}"
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ];
  let currentImageIndex = 0;

  // Image Zoom Variables
  let imageZoom = null;

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  function init() {
    setupImageGallery();
    setupImageZoom();
    setupVariantSelector();
    setupFormSubmission();
    setupLightbox();
    setupWindowResize();
    setupWishlistButton();
  }

  // Window Resize Handler
  function setupWindowResize() {
    let resizeTimeout;
    window.addEventListener('resize', function() {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        setupImageZoom();
      }, 250);
    });
  }

  // Custom Image Zoom Implementation
  function setupImageZoom() {
    if (!mainImage) return;

    // Disable on mobile/tablet
    if (window.innerWidth <= 768) {
      return;
    }



    // Destroy existing zoom if it exists
    if (imageZoom && imageZoom.destroy) {
      imageZoom.destroy();
    }

    // Get the container element
    const container = mainImage.parentElement;
    if (!container) {
      console.warn('No container found for image zoom');
      return;
    }

    // Ensure container has relative positioning
    if (getComputedStyle(container).position === 'static') {
      container.style.position = 'relative';
    }

    let zoomLevel = 2;
    const minZoom = 1.5;
    const maxZoom = 4;
    let zoomBox = null;
    let lens = null;
    let isZooming = false;

        // Create zoom elements
    function createZoomElements() {
      // Remove existing elements
      const existingZoomBox = document.querySelector('.custom-zoom-box');
      const existingLens = document.querySelector('.custom-zoom-lens');
      if (existingZoomBox) existingZoomBox.remove();
      if (existingLens) existingLens.remove();

      // Calculate zoom box size
      const zoomBoxSize = window.innerWidth <= 1200 ? 300 : (window.innerWidth <= 1400 ? 350 : 400);

      // Create zoom box
      zoomBox = document.createElement('div');
      zoomBox.className = 'custom-zoom-box';

            // Calculate position to ensure it's visible
      const containerRect = container.getBoundingClientRect();
      const viewportWidth = window.innerWidth;
      const spaceOnRight = viewportWidth - containerRect.right;

            // If not enough space on right, position on left
      const leftPosition = spaceOnRight >= zoomBoxSize + 40 ? 'calc(100% + 20px)' : `${-zoomBoxSize - 20}px`;

              zoomBox.style.cssText = `
        position: fixed;
        left: ${containerRect.right + 20}px;
        top: ${containerRect.top}px;
        width: ${zoomBoxSize}px;
        height: ${zoomBoxSize}px;
        border: 3px solid #ff6b9d;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25);
        background: white;
        z-index: 9999;
        pointer-events: none;
        overflow: hidden;
        display: block;
        opacity: 1;
        transition: opacity 0.2s ease;
      `;

      // Add zoom box to body instead of container to avoid overflow issues
      document.body.appendChild(zoomBox);

            // Create zoomed image
      const zoomedImg = document.createElement('img');
      zoomedImg.src = mainImage.getAttribute('data-zoom') || mainImage.src;
      zoomedImg.style.cssText = `
        width: ${zoomBoxSize * zoomLevel}px;
        height: ${zoomBoxSize * zoomLevel}px;
        position: absolute;
        top: 0;
        left: 0;
        pointer-events: none;
        object-fit: cover;
      `;
      zoomBox.appendChild(zoomedImg);

      // Create lens
      lens = document.createElement('div');
      lens.className = 'custom-zoom-lens';
      lens.style.cssText = `
        position: absolute;
        border: 2px solid rgba(255, 255, 255, 0.8);
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        background: rgba(255, 255, 255, 0.4);
        cursor: crosshair;
        display: block;
        opacity: 1;
        transition: opacity 0.2s ease;
        pointer-events: none;
      `;

      // Add lens to container (this can stay in container)
      container.appendChild(lens);

      // Store zoom box size for calculations
      zoomBox.zoomBoxSize = zoomBoxSize;
    }

    // Update zoom position
    function updateZoom(e) {
      if (!zoomBox || !lens) return;

      const rect = mainImage.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;

      // Use stored zoom box size
      const zoomBoxSize = zoomBox.zoomBoxSize || 400;

      // Calculate lens size based on zoom level
      const lensWidth = zoomBoxSize / zoomLevel;
      const lensHeight = zoomBoxSize / zoomLevel;

      // Position lens (relative to image)
      let lensX = x - lensWidth / 2;
      let lensY = y - lensHeight / 2;

      // Keep lens within image bounds
      lensX = Math.max(0, Math.min(lensX, rect.width - lensWidth));
      lensY = Math.max(0, Math.min(lensY, rect.height - lensHeight));

      lens.style.left = lensX + 'px';
      lens.style.top = lensY + 'px';
      lens.style.width = lensWidth + 'px';
      lens.style.height = lensHeight + 'px';

      // Update zoom box position (fixed to viewport)
      zoomBox.style.left = (rect.right + 20) + 'px';
      zoomBox.style.top = rect.top + 'px';

                  // Update zoomed image position
      const zoomedImg = zoomBox.querySelector('img');
      if (zoomedImg) {
        // Simple calculation: move the zoomed image based on lens position
        const bgX = -lensX * zoomLevel;
        const bgY = -lensY * zoomLevel;

        zoomedImg.style.left = bgX + 'px';
        zoomedImg.style.top = bgY + 'px';
      }
    }

    // Event handlers
    function handleMouseEnter() {
      if (!isZooming) {
        isZooming = true;
        createZoomElements();
      }
    }

    function handleMouseLeave() {
      isZooming = false;
      // Remove zoom elements
      const existingZoomBox = document.querySelector('.custom-zoom-box');
      const existingLens = document.querySelector('.custom-zoom-lens');
      if (existingZoomBox) existingZoomBox.remove();
      if (existingLens) existingLens.remove();
    }

    function handleMouseMove(e) {
      if (isZooming) {
        updateZoom(e);
      }
    }

                function handleWheel(e) {
      if (isZooming) {
        e.preventDefault();

        const delta = e.deltaY;
        const zoomChange = delta > 0 ? -0.3 : 0.3;
        zoomLevel = Math.max(minZoom, Math.min(maxZoom, zoomLevel + zoomChange));

        // Update zoomed image size
        const zoomedImg = zoomBox?.querySelector('img');
        if (zoomedImg && zoomBox) {
          const zoomBoxSize = zoomBox.zoomBoxSize || 400;
          zoomedImg.style.width = (zoomBoxSize * zoomLevel) + 'px';
          zoomedImg.style.height = (zoomBoxSize * zoomLevel) + 'px';
        }

        // Update zoom position
        updateZoom(e);
      }
    }

    // Add event listeners
    mainImage.addEventListener('mouseenter', handleMouseEnter);
    mainImage.addEventListener('mouseleave', handleMouseLeave);
    mainImage.addEventListener('mousemove', handleMouseMove);
    mainImage.addEventListener('wheel', handleWheel, { passive: false });

    // Store cleanup function
    imageZoom = {
      destroy: function() {
        mainImage.removeEventListener('mouseenter', handleMouseEnter);
        mainImage.removeEventListener('mouseleave', handleMouseLeave);
        mainImage.removeEventListener('mousemove', handleMouseMove);
        mainImage.removeEventListener('wheel', handleWheel);

        const existingZoomBox = document.querySelector('.custom-zoom-box');
        const existingLens = document.querySelector('.custom-zoom-lens');
        if (existingZoomBox) existingZoomBox.remove();
        if (existingLens) existingLens.remove();

        zoomBox = null;
        lens = null;
        isZooming = false;
      }
    };
  }

  // Image Gallery
  function setupImageGallery() {
    thumbnails.forEach(thumbnail => {
      let clickCount = 0;

      thumbnail.addEventListener('click', function(e) {
        const imageUrl = this.dataset.image;
        const zoomUrl = this.dataset.zoom;
        const index = parseInt(this.dataset.index);

        if (mainImage) {
          mainImage.src = imageUrl;
          mainImage.setAttribute('data-zoom', zoomUrl);

          // Reinitialize zoom with new image
          setTimeout(() => {
            setupImageZoom();
          }, 100);
        }

        currentImageIndex = index;
        thumbnails.forEach(thumb => thumb.classList.remove('active'));
        this.classList.add('active');

        // Double-click detection for lightbox
        clickCount++;
        setTimeout(() => {
          if (clickCount === 2) {
            openLightboxSimple(index);
          }
          clickCount = 0;
        }, 300);
      });
    });
  }





  // Variant Selector
  function setupVariantSelector() {
    if (variantSelect) {
      new Shopify.OptionSelectors('variantSelect', {
        product: product,
        onVariantSelected: selectCallback,
        enableHistoryState: true
      });
    }
  }

  // Variant Selection Callback
  function selectCallback(variant) {
    if (variant) {
      // Update price
      if (priceElement) {
        priceElement.innerHTML = Shopify.formatMoney(variant.price, moneyFormat);
      }

      // Update compare price
      if (compareElement) {
        if (variant.compare_at_price > variant.price) {
          compareElement.innerHTML = Shopify.formatMoney(variant.compare_at_price, moneyFormat);
          compareElement.style.display = 'inline';
        } else {
          compareElement.style.display = 'none';
        }
      }

      // Update availability
      if (availabilityElement) {
        availabilityElement.textContent = variant.available ? 'In Stock' : 'Out of Stock';
      }

      // Update stock status
      if (stockText && stockIndicator) {
        if (variant.available) {
          if (variant.inventory_management && variant.inventory_quantity > 0) {
            stockText.textContent = `${variant.inventory_quantity} в наличност`;
          } else {
            stockText.textContent = 'В наличност';
          }
          stockIndicator.classList.remove('out-of-stock');
        } else {
          stockText.textContent = 'Няма в наличност';
          stockIndicator.classList.add('out-of-stock');
        }
      }

      // Update SKU
      if (skuElement) {
        skuElement.textContent = variant.sku || 'N/A';
      }

      // Update specifications availability
      if (specAvailability) {
        if (variant.available) {
          if (variant.inventory_management && variant.inventory_quantity > 0) {
            specAvailability.textContent = 'В наличност';
          } else {
            specAvailability.textContent = 'В наличност';
          }
        } else {
          specAvailability.textContent = 'Няма в наличност';
        }
      }

      // Update specifications SKU
      const specSkuElements = document.querySelectorAll('.spec-item .spec-value');
      specSkuElements.forEach(element => {
        if (element.parentNode.querySelector('.spec-label').textContent.includes('SKU')) {
          element.textContent = variant.sku || 'N/A';
        }
      });

      // Update image
      if (variant.featured_image && mainImage) {
        const newImageUrl = variant.featured_image.src.replace(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?.*)?$/i, '_grande.$1$2');
        const newZoomUrl = variant.featured_image.src.replace(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?.*)?$/i, '_master.$1$2');

        mainImage.src = newImageUrl;
        mainImage.setAttribute('data-zoom', newZoomUrl);

        // Reinitialize zoom with new image
        setTimeout(() => {
          setupImageZoom();
        }, 100);

        // Update current image index for lightbox
        const imageIndex = productImages.findIndex(img => img.src === newZoomUrl);
        if (imageIndex !== -1) {
          currentImageIndex = imageIndex;
        }

        // Update active thumbnail
        thumbnails.forEach((thumb, index) => {
          thumb.classList.toggle('active', index === currentImageIndex);
        });
      }

              // Update button
        if (addToCartBtn && cartText) {
          if (variant.available) {
            addToCartBtn.disabled = false;
            cartText.textContent = 'Добави в количката';
          } else {
            addToCartBtn.disabled = true;
            cartText.textContent = 'Няма в наличност';
          }
        }
    }
  }

    // Lightbox Setup
  function setupLightbox() {
    // Simple direct approach - find elements again
    const lightboxEl = document.getElementById('imageLightbox');
    const mainImageEl = document.getElementById('mainImageContainer');
    const lightboxImageEl = document.getElementById('lightboxImage');
    const lightboxCloseEl = document.getElementById('lightboxClose');
    const lightboxOverlayEl = document.querySelector('.lightbox-overlay');
    const lightboxPrevEl = document.getElementById('lightboxPrev');
    const lightboxNextEl = document.getElementById('lightboxNext');
    const lightboxCurrentEl = document.getElementById('lightboxCurrent');
    const lightboxTotalEl = document.getElementById('lightboxTotal');

    if (!lightboxEl || productImages.length === 0) {
      return;
    }

    // Main image click to open lightbox
    if (mainImageEl) {
      mainImageEl.style.cursor = 'zoom-in';
      let mouseDownTime = 0;
      let isMouseDown = false;

      mainImageEl.addEventListener('mousedown', function(e) {
        mouseDownTime = Date.now();
        isMouseDown = true;
      });

      mainImageEl.addEventListener('mouseup', function(e) {
        isMouseDown = false;
      });

      mainImageEl.addEventListener('mouseleave', function(e) {
        isMouseDown = false;
      });

      mainImageEl.addEventListener('click', function(e) {
        const clickDuration = Date.now() - mouseDownTime;

        // Only open lightbox on quick clicks (not drag-like interactions)
        // and only on desktop when not actively zooming
        if (clickDuration < 200 && !isMouseDown) {
          e.preventDefault();
          e.stopPropagation();
          openLightboxSimple(currentImageIndex);
        }
      });
    }

    // Close lightbox
    if (lightboxCloseEl) {
      lightboxCloseEl.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        closeLightboxSimple();
      });
    }

    if (lightboxOverlayEl) {
      lightboxOverlayEl.addEventListener('click', function(e) {
        e.preventDefault();
        closeLightboxSimple();
      });
    }

    // Navigation
    if (lightboxPrevEl) {
      lightboxPrevEl.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        navigateLightboxSimple(-1);
      });
    }

    if (lightboxNextEl) {
      lightboxNextEl.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        navigateLightboxSimple(1);
      });
    }

    // Keyboard navigation
    document.addEventListener('keydown', function(e) {
      if (!lightboxEl.classList.contains('active')) return;

      switch(e.key) {
        case 'Escape':
          closeLightboxSimple();
          break;
        case 'ArrowLeft':
          navigateLightboxSimple(-1);
          break;
        case 'ArrowRight':
          navigateLightboxSimple(1);
          break;
      }
    });

    // Set initial counter
    if (lightboxTotalEl) {
      lightboxTotalEl.textContent = productImages.length;
    }

    // Add thumbnail click functionality
    const thumbnailElements = document.querySelectorAll('.thumbnail');
    thumbnailElements.forEach((thumbnail, index) => {
      thumbnail.addEventListener('dblclick', function(e) {
        e.preventDefault();
        openLightboxSimple(index);
      });
    });
  }

  // Simplified lightbox functions
  function openLightboxSimple(index) {
    const lightboxEl = document.getElementById('imageLightbox');
    const lightboxImageEl = document.getElementById('lightboxImage');
    const lightboxCurrentEl = document.getElementById('lightboxCurrent');

    if (!lightboxEl || !lightboxImageEl || !productImages[index]) {
      return;
    }

    currentImageIndex = index;
    lightboxImageEl.src = productImages[index].src;
    lightboxImageEl.alt = productImages[index].alt;

    if (lightboxCurrentEl) {
      lightboxCurrentEl.textContent = index + 1;
    }

    updateLightboxNavigationSimple();
    lightboxEl.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function closeLightboxSimple() {
    const lightboxEl = document.getElementById('imageLightbox');
    if (!lightboxEl) return;

    lightboxEl.classList.remove('active');
    document.body.style.overflow = '';
  }

  function navigateLightboxSimple(direction) {
    const newIndex = currentImageIndex + direction;

    if (newIndex >= 0 && newIndex < productImages.length) {
      openLightboxSimple(newIndex);
    }
  }

  function updateLightboxNavigationSimple() {
    const lightboxPrevEl = document.getElementById('lightboxPrev');
    const lightboxNextEl = document.getElementById('lightboxNext');

    if (lightboxPrevEl) {
      lightboxPrevEl.disabled = currentImageIndex === 0;
    }

    if (lightboxNextEl) {
      lightboxNextEl.disabled = currentImageIndex === productImages.length - 1;
    }
  }



  // Form Submission
  function setupFormSubmission() {
    if (productForm) {
      productForm.addEventListener('submit', function(e) {
        e.preventDefault();

        addToCartBtn.classList.add('loading');
        cartText.textContent = 'Добавяне...';

        const formData = new FormData(this);

        fetch('/cart/add.js', {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (!response.ok) {
            return response.text().then(text => {
              throw new Error(`HTTP ${response.status}: ${text}`);
            });
          }
          return response.json();
        })
        .then(data => {
          addToCartBtn.classList.remove('loading');
          cartText.textContent = 'Добавено!';

          // Show success toast notification
          showCartToast('Продуктът е добавен в количката!', 'success');

          // Dispatch cart updated event for theme compatibility
          document.dispatchEvent(new CustomEvent('cart:updated', {
            detail: { item: data }
          }));

          // Also dispatch legacy cart events for broader compatibility
          if (window.timber && window.timber.cartUpdateCallback) {
            window.timber.cartUpdateCallback(data);
          }

          setTimeout(() => {
            cartText.textContent = 'Добави в количката';
          }, 2000);
        })
        .catch(error => {
          console.error('Error adding to cart:', error);
          addToCartBtn.classList.remove('loading');

          // Show more specific error messages and toast notifications
          let errorText = 'Опитай отново';
          let toastMessage = 'Възникна грешка при добавянето в количката';

          if (error.message.includes('422')) {
            errorText = 'Няма в наличност';
            toastMessage = 'Продуктът не е в наличност';
          } else if (error.message.includes('404')) {
            errorText = 'Продуктът не е намерен';
            toastMessage = 'Продуктът не е намерен';
          }

          cartText.textContent = errorText;
          showCartToast(toastMessage, 'error');

          setTimeout(() => {
            cartText.textContent = 'Добави в количката';
          }, 3000);
        });
      });
    }
  }

  // Wishlist Button Setup
  function setupWishlistButton() {
    const wishlistBtn = document.querySelector('.add-in-wishlist-js');
    if (!wishlistBtn) return;

    const productHandle = '{{ product.handle }}';
    const cookieName = "wishlistList";

    // Initialize button state
    updateWishlistButtonState();

    // Add click event listener
    wishlistBtn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();

      try {
        // Get current wishlist from cookie
        let wishlistItems = getCookie(cookieName) || '';

        // Check if product is already in wishlist
        if (wishlistItems.indexOf(productHandle) !== -1) {
          showWishlistMessage('Продуктът вече е в списъка с желания!', 'info');
          return;
        }

        // Add product to wishlist
        if (wishlistItems === '') {
          wishlistItems = productHandle;
        } else {
          wishlistItems = wishlistItems + '__' + productHandle;
        }

        // Save to cookie
        setCookie(cookieName, wishlistItems, 14);

        // Show loading state
        showWishlistButtonState('loading');

        // Show added state after 2 seconds
        setTimeout(() => {
          showWishlistButtonState('added');
          showWishlistMessage('Продуктът е добавен в списъка с желания!', 'success');
        }, 2000);

      } catch (error) {
        console.error('Error adding to wishlist:', error);
        showWishlistMessage('Грешка при добавянето в списъка с желания', 'error');
      }
    });

    // Helper functions
    function updateWishlistButtonState() {
      try {
        const wishlistItems = getCookie(cookieName);
        if (wishlistItems && wishlistItems.indexOf(productHandle) !== -1) {
          showWishlistButtonState('added');
        } else {
          showWishlistButtonState('default');
        }
      } catch (error) {
        console.error('Error updating wishlist button state:', error);
      }
    }

    function showWishlistButtonState(state) {
      const defaultBtn = document.querySelector('.default-wishbutton-' + productHandle);
      const loadingBtn = document.querySelector('.loadding-wishbutton-' + productHandle);
      const addedBtn = document.querySelector('.added-wishbutton-' + productHandle);

      // Hide all states
      if (defaultBtn) defaultBtn.style.display = 'none';
      if (loadingBtn) loadingBtn.style.display = 'none';
      if (addedBtn) addedBtn.style.display = 'none';

      // Show appropriate state
      switch (state) {
        case 'default':
          if (defaultBtn) defaultBtn.style.display = 'block';
          break;
        case 'loading':
          if (loadingBtn) loadingBtn.style.display = 'block';
          break;
        case 'added':
          if (addedBtn) addedBtn.style.display = 'block';
          break;
      }
    }

    function getCookie(name) {
      const value = "; " + document.cookie;
      const parts = value.split("; " + name + "=");
      if (parts.length === 2) return parts.pop().split(";").shift();
      return null;
    }

    function setCookie(name, value, days) {
      const expires = new Date();
      expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
      document.cookie = name + "=" + value + ";expires=" + expires.toUTCString() + ";path=/";
    }

    function showWishlistMessage(message, type) {
      createToast(message, type, 'wishlist-toast');
    }
  }

  // Unified toast notification function for both cart and wishlist
  function showCartToast(message, type) {
    createToast(message, type, 'cart-toast');
  }

  function createToast(message, type, className) {
    // Create toast notification container
    const toast = document.createElement('div');
    toast.className = `${className} ${className}--${type}`;
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px 15px 15px;
      background: ${type === 'success' ? '#00b894' : type === 'info' ? '#3498db' : '#e74c3c'};
      color: white;
      border-radius: 12px;
      font-weight: 600;
      z-index: 10000;
      opacity: 0;
      transform: translateY(-20px);
      transition: all 0.3s ease;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      font-size: 0.9rem;
      max-width: 300px;
      word-wrap: break-word;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 10px;
    `;

    // Create message text
    const messageText = document.createElement('span');
    messageText.textContent = message;
    messageText.style.cssText = `
      flex: 1;
      line-height: 1.4;
    `;

    // Create close button
    const closeButton = document.createElement('button');
    closeButton.innerHTML = '×';
    closeButton.style.cssText = `
      background: none;
      border: none;
      color: white;
      font-size: 18px;
      font-weight: bold;
      cursor: pointer;
      padding: 0;
      margin: 0;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: background-color 0.2s ease;
      flex-shrink: 0;
    `;

    // Add hover effect to close button
    closeButton.addEventListener('mouseenter', () => {
      closeButton.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
    });

    closeButton.addEventListener('mouseleave', () => {
      closeButton.style.backgroundColor = 'transparent';
    });

    // Append elements
    toast.appendChild(messageText);
    toast.appendChild(closeButton);
    document.body.appendChild(toast);

    // Function to close toast
    function closeToast() {
      toast.style.opacity = '0';
      toast.style.transform = 'translateY(-20px)';
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }

    // Add click event listeners
    toast.addEventListener('click', closeToast);
    closeButton.addEventListener('click', (e) => {
      e.stopPropagation();
      closeToast();
    });

    // Show toast
    setTimeout(() => {
      toast.style.opacity = '1';
      toast.style.transform = 'translateY(0)';
    }, 100);

    // Auto-hide toast after 5 seconds (increased from 3)
    const autoHideTimeout = setTimeout(() => {
      closeToast();
    }, 5000);

    // Clear timeout if user closes manually
    toast.addEventListener('click', () => {
      clearTimeout(autoHideTimeout);
    });
  }
})();

// Legacy support
var selectCallback = function(variant, selector) {
  if (typeof timber !== 'undefined' && timber.productPage) {
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  }
};
</script>
