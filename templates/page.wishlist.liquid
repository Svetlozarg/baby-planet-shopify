{% comment %}
  Modern Wishlist Page - Redesigned with Beautiful UI/UX
  Full Bulgarian Language Support
{% endcomment %}

{{ 'wishlist-modern.css' | asset_url | stylesheet_tag }}

<div class="wishlist-page">
  <div class="wishlist-container">
    <!-- Header Section -->
    <div class="wishlist-header">
      <h1>{{ 'products.wishlist.wishlist_name' | t }}</h1>
      <p class="subtitle">–í–∞—à–∏—Ç–µ –ª—é–±–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –Ω–∞ –µ–¥–Ω–æ –º—è—Å—Ç–æ</p>
      <div class="wishlist-stats">
        <div class="stat-item">
          <span class="stat-number" id="wishlist-count">0</span>
          <span class="stat-label">–ü—Ä–æ–¥—É–∫—Ç–∏</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" id="wishlist-value">0 –ª–≤</span>
          <span class="stat-label">–û–±—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç</span>
        </div>
      </div>
    </div>

    <!-- Wishlist Items Grid -->
    <div class="wishlist-grid" id="wishlist-grid">
      <!-- Items will be populated by JavaScript -->
    </div>

    <!-- Empty State -->
    <div class="empty-wishlist" id="empty-wishlist" style="display: none;">
      <div class="empty-wishlist-icon">üíù</div>
      <h2>{{ 'products.wishlist.wishlist_empty' | t }}</h2>
      <p>–î–æ–±–∞–≤–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏ –≤ —Å–ø–∏—Å—ä–∫–∞ —Å–∏ —Å –∂–µ–ª–∞–Ω–∏—è, –∑–∞ –¥–∞ –≥–∏ –∑–∞–ø–∞–∑–∏—Ç–µ –∑–∞ –ø–æ-–∫—ä—Å–Ω–æ</p>
      <a href="/collections/all" class="continue-shopping">–ó–∞–ø–æ—á–Ω–µ—Ç–µ –ø–∞–∑–∞—Ä—É–≤–∞–Ω–µ—Ç–æ</a>
    </div>

    <!-- Wishlist Actions -->
    <div class="wishlist-actions" id="wishlist-actions" style="display: none;">
      <button class="clear-wishlist" onclick="clearWishlist()">
        –ò–∑—á–∏—Å—Ç–µ—Ç–µ —Ü–µ–ª–∏—è —Å–ø–∏—Å—ä–∫
      </button>
    </div>
  </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loading-overlay">
  <div class="loading-spinner"></div>
</div>

<!-- Hidden Templates -->
<div style="display: none;">
  <div class="wishlist-item-template" id="wishlist-item-template">
    <div class="wishlist-item">
      <div class="wishlist-item-image">
        <img src="" alt="" class="product-image">
        <button class="remove-btn" onclick="removeFromWishlist(this)" title="–ü—Ä–µ–º–∞—Ö–Ω–µ—Ç–µ –æ—Ç —Å–ø–∏—Å—ä–∫–∞">
          √ó
        </button>
      </div>
      <div class="wishlist-item-content">
        <h3 class="wishlist-item-title">
          <a href="" class="product-link"></a>
        </h3>
        <div class="wishlist-item-price">
          <span class="price"></span>
        </div>
        <div class="wishlist-item-stock">
          <span class="stock-status"></span>
        </div>
        <div class="wishlist-item-actions">
          <a href="" class="btn btn-primary product-link">–í–∏–∂—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∞</a>
          <button class="btn btn-secondary" onclick="addToCart(this)" data-product-id="">
            –î–æ–±–∞–≤–µ—Ç–µ –≤ –∫–æ–ª–∏—á–∫–∞—Ç–∞
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
$(document).ready(function() {
  // Bulgarian translations
  window.wishlistTranslations = {
    inStock: '–í –Ω–∞–ª–∏—á–Ω–æ—Å—Ç',
    outOfStock: '–ù—è–º–∞ –≤ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç',
    manyInStock: '–ú–Ω–æ–≥–æ –≤ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç',
    addToCart: '–î–æ–±–∞–≤–µ—Ç–µ –≤ –∫–æ–ª–∏—á–∫–∞—Ç–∞',
    viewProduct: '–í–∏–∂—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∞',
    removeFromWishlist: '–ü—Ä–µ–º–∞—Ö–Ω–µ—Ç–µ –æ—Ç —Å–ø–∏—Å—ä–∫–∞',
    addedToCart: '–î–æ–±–∞–≤–µ–Ω–æ –≤ –∫–æ–ª–∏—á–∫–∞—Ç–∞!',
    removedFromWishlist: '–ü—Ä–µ–º–∞—Ö–Ω–∞—Ç–æ –æ—Ç —Å–ø–∏—Å—ä–∫–∞!',
    confirmClear: '–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—á–∏—Å—Ç–∏—Ç–µ —Ü–µ–ª–∏—è —Å–ø–∏—Å—ä–∫ —Å –∂–µ–ª–∞–Ω–∏—è?',
    wishlistCleared: '–°–ø–∏—Å—ä–∫—ä—Ç —Å –∂–µ–ª–∞–Ω–∏—è –µ –∏–∑—á–∏—Å—Ç–µ–Ω!',
    currency: '–ª–≤',
    loading: '–ó–∞—Ä–µ–∂–¥–∞–Ω–µ...',
    error: '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞',
    addingToCart: '–î–æ–±–∞–≤—è–Ω–µ...',
    added: '–î–æ–±–∞–≤–µ–Ω–æ!',
    cartError: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ—Ç–æ –≤ –∫–æ–ª–∏—á–∫–∞—Ç–∞'
  };

  var cookieName = "wishlistList";
  var wishlistItems = [];
  var totalValue = 0;

  // Show loading
  function showLoading() {
    $('#loading-overlay').addClass('active');
  }

  // Hide loading
  function hideLoading() {
    $('#loading-overlay').removeClass('active');
  }

  // Initialize wishlist
  function initWishlist() {
    showLoading();

    try {
      if($.cookie(cookieName) != null && $.cookie(cookieName) != '__' && $.cookie(cookieName) != '') {
        var productHandles = String($.cookie(cookieName)).split("__");
        var loadedProducts = 0;
        var totalProducts = productHandles.filter(handle => handle != '').length;

        if (totalProducts === 0) {
          showEmptyState();
          hideLoading();
          return;
        }

        for(var i = 0; i < productHandles.length; i++) {
          if(productHandles[i] != '') {
            Shopify.getProduct(productHandles[i], function(product) {
              if (product) {
                wishlistItems.push(product);
                addProductToGrid(product);
                totalValue += product.price;
              }

              loadedProducts++;
              if (loadedProducts === totalProducts) {
                updateStats();
                hideLoading();
                showWishlistActions();
              }
            });
          }
        }
      } else {
        showEmptyState();
        hideLoading();
      }
    } catch (err) {
      console.error('Error loading wishlist:', err);
      showEmptyState();
      hideLoading();
    }
  }

  // Add product to grid
  function addProductToGrid(product) {
    var template = $('#wishlist-item-template').html();
    var $item = $(template);

    // Set product data
    $item.find('.product-image').attr('src', product.featured_image || '/assets/no-image.png');
    $item.find('.product-image').attr('alt', product.title);
    $item.find('.product-link').attr('href', product.url);
    $item.find('.product-link').first().text(product.title);
    $item.find('.price').html(Shopify.formatMoney(product.price) + ' –ª–≤');
    $item.find('[data-product-id]').attr('data-product-id', product.id);
    $item.find('.remove-btn').attr('data-product-handle', product.handle);

    // Set stock status
    var stockClass = product.available ? 'in-stock' : 'out-of-stock';
    var stockText = product.available ?
      (product.variants && product.variants.length > 0 && product.variants[0].inventory_quantity > 10 ?
        window.wishlistTranslations.manyInStock : window.wishlistTranslations.inStock) :
      window.wishlistTranslations.outOfStock;

    $item.find('.stock-status').addClass(stockClass).text(stockText);

    // Add to grid
    $('#wishlist-grid').append($item);
  }

  // Update stats
  function updateStats() {
    $('#wishlist-count').text(wishlistItems.length);
    $('#wishlist-value').text(Shopify.formatMoney(totalValue) + ' –ª–≤');
  }

  // Show empty state
  function showEmptyState() {
    $('#empty-wishlist').show();
    $('#wishlist-actions').hide();
  }

  // Show wishlist actions
  function showWishlistActions() {
    if (wishlistItems.length > 0) {
      $('#wishlist-actions').show();
      $('#empty-wishlist').hide();
    }
  }

  // Remove from wishlist
  window.removeFromWishlist = function(button) {
    var productHandle = $(button).attr('data-product-handle');
    var $item = $(button).closest('.wishlist-item');

    // Remove from cookie
    var str = $.cookie(cookieName) || '';
    str = str.replace(productHandle, '');
    str = str.replace('____', '__');
    str = str.replace(/^__/, '').replace(/__$/, '');

    $.cookie(cookieName, str, {expires: 14, path: '/'});

    // Remove from display
    $item.fadeOut(300, function() {
      $(this).remove();

      // Update arrays
      wishlistItems = wishlistItems.filter(item => item.handle !== productHandle);
      totalValue = wishlistItems.reduce((sum, item) => sum + item.price, 0);

      updateStats();

      if (wishlistItems.length === 0) {
        showEmptyState();
      }
    });

    // Show success message
    showToast(window.wishlistTranslations.removedFromWishlist, 'success');
  };

  // Add to cart
  window.addToCart = function(button) {
    var productId = $(button).attr('data-product-id');
    var $btn = $(button);
    var originalText = $btn.text();

    $btn.text(window.wishlistTranslations.addingToCart).prop('disabled', true);

    // Add to cart via AJAX
    $.ajax({
      url: '/cart/add.js',
      type: 'POST',
      data: {
        id: productId,
        quantity: 1
      },
      success: function(response) {
        $btn.text(window.wishlistTranslations.added).removeClass('btn-secondary').addClass('btn-primary');
        showToast(window.wishlistTranslations.addedToCart, 'success');

        // Update cart count if element exists
        updateCartCount();

        setTimeout(function() {
          $btn.text(originalText).prop('disabled', false).removeClass('btn-primary').addClass('btn-secondary');
        }, 2000);
      },
      error: function(xhr, status, error) {
        $btn.text(originalText).prop('disabled', false);
        showToast(window.wishlistTranslations.cartError, 'error');
      }
    });
  };

  // Clear wishlist
  window.clearWishlist = function() {
    if (confirm(window.wishlistTranslations.confirmClear)) {
      $.cookie(cookieName, '', {expires: -1, path: '/'});
      $('#wishlist-grid').empty();
      wishlistItems = [];
      totalValue = 0;
      updateStats();
      showEmptyState();
      showToast(window.wishlistTranslations.wishlistCleared, 'success');
    }
  };

  // Update cart count
  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const cartCountElements = document.querySelectorAll('.cart-count, .cart-item-count');
        cartCountElements.forEach(element => {
          element.textContent = cart.item_count;
        });
      })
      .catch(error => console.error('Error updating cart count:', error));
  }

  // Show toast notification
  function showToast(message, type) {
    var toast = $('<div class="toast toast-' + type + '">' + message + '</div>');
    toast.css({
      position: 'fixed',
      top: '20px',
      right: '20px',
      padding: '15px 25px',
      background: type === 'success' ? '#27ae60' : '#e74c3c',
      color: 'white',
      borderRadius: '8px',
      zIndex: 10000,
      opacity: 0,
      transform: 'translateY(-20px)',
      transition: 'all 0.3s ease',
      fontWeight: '600',
      backdropFilter: 'blur(10px)',
      boxShadow: '0 8px 25px rgba(0, 0, 0, 0.15)'
    });

    $('body').append(toast);

    setTimeout(function() {
      toast.css({opacity: 1, transform: 'translateY(0)'});
    }, 100);

    setTimeout(function() {
      toast.css({opacity: 0, transform: 'translateY(-20px)'});
      setTimeout(function() {
        toast.remove();
      }, 300);
    }, 3000);
  }

  // Initialize
  initWishlist();

  // Handle responsive layout
  function handleResize() {
    if (window.innerWidth <= 768) {
      $('.wishlist-stats').addClass('mobile-stats');
    } else {
      $('.wishlist-stats').removeClass('mobile-stats');
    }
  }

  $(window).resize(handleResize);
  handleResize();
});

// Cookie utility (enhanced version)
if (typeof $.cookie === 'undefined') {
  jQuery.cookie = function(name, value, options) {
    if (typeof value !== 'undefined') {
      options = options || {};
      if (value === null) {
        value = '';
        options.expires = -1;
      }
      var expires = '';
      if (options.expires && (typeof options.expires === 'number' || options.expires.toUTCString)) {
        var date;
        if (typeof options.expires === 'number') {
          date = new Date();
          date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
        } else {
          date = options.expires;
        }
        expires = '; expires=' + date.toUTCString();
      }
      var path = options.path ? '; path=' + options.path : '';
      var domain = options.domain ? '; domain=' + options.domain : '';
      var secure = options.secure ? '; secure' : '';
      document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
    } else {
      var cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
          var cookie = jQuery.trim(cookies[i]);
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }
  };
}

// Enhanced Shopify product fetching
if (typeof Shopify.getProduct === 'undefined') {
  Shopify.getProduct = function(handle, callback) {
    jQuery.getJSON('/products/' + handle + '.js', function(product) {
      callback(product);
    }).fail(function() {
      console.error('Failed to load product:', handle);
      callback(null);
    });
  };
}
</script>

<style>
/* Additional mobile optimizations */
@media (max-width: 768px) {
  .mobile-stats {
    flex-direction: column;
    gap: 20px;
  }

  .mobile-stats .stat-item {
    padding: 15px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
  }
}

/* Accessibility improvements */
.wishlist-item:focus-within {
  outline: 2px solid #667eea;
  outline-offset: 2px;
}

.btn:focus {
  outline: 2px solid #667eea;
  outline-offset: 2px;
}

.remove-btn:focus {
  outline: 2px solid #fff;
  outline-offset: 2px;
}

/* Print styles */
@media print {
  .wishlist-page {
    background: white !important;
  }

  .remove-btn,
  .wishlist-actions,
  .loading-overlay {
    display: none !important;
  }

  .wishlist-item {
    break-inside: avoid;
    box-shadow: none;
    border: 1px solid #ddd;
  }
}
</style>
